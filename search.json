[{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Dealing with flight data","text":"goal vignette illustrate process behind functions rnp_flight_data add_flight_metadata throne package. two functions allow processing raw .tif file obtained combining images gathered flight data structure easily manageable R (.e., tibble) later related operative temperature model (OTM) data finally predict predict thermal landscapes. NOTE: go clarify issues, throughout vignette, provie links additional resources complementary information.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"reading-and-processing-flight-data","dir":"Articles","previous_headings":"","what":"Reading and processing flight data","title":"Dealing with flight data","text":"rnp_flight_data function (.e., read process flight data) uses functionality developed packages raster, sf terra transform .tif file data frame like R data structure (tibble). detail functions inputs, processing output.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"inputs","dir":"Articles","previous_headings":"Reading and processing flight data","what":"Inputs","title":"Dealing with flight data","text":"rnp_flight_data takes 2 inputs: file_path: path folder .tif file stored. digits: number decimal digits final output summarized . argument digits determines number decimal digit places latitude longitude information rounded . argument therefore determine spatial resolution final measurement different latitude longitude decimal digits correspond different distances. generalization, 1 degree latitude can approximated 111.32 km, relationship can extended decimal digits seen .  contrast, due curvature Earth distance represented longitude degree also dependent latitude. can find information transform degrees longitude distances . Furthermore, proxistat Rpackage provides helpful functions transform coordinate systems measurable distances. use proxistat functions illustrate latitude influences distance represented longitudinal degree.  Based , majority cases, recommend setting argument digits = 5. provide spatial resolution ~ 1.2 \\(m^2\\) equator gradually descend little ~ 0.5 \\(m^2\\) 66° Latitude seen .  spatial resolution guarantees original .tif file processed scale relevant majority study organisms package intended. However, leave decision user consider spatial scale relevant organism. image (figure S1 accompanying paper), illustrate flight processed argument digits set 4, 5 6 respectively. image , order transform original .tif file, rnp_flight_data goes following general steps: Read .tif file raster object using raster function raster package. Transform raster data frame via rasterToPoints function also raster package. resulting data frame longitude, latitude reflected temperature (.e., temperature measured drone) many rows combinations unique longitude latitude values initial .tif file . combination corresponds “tile” within area study area “tile” determined number decimal digits latitude longitude measurements presented earlier. Project coordinates newly created data frame Universal Transverse Mercator(UTM) coordinate system easy interpret World Geodetic System(WGS84) coordinate system (.e., system based UTM zones widely used decimal latitude longitude degrees), using project function terra package. Round number decimal digits latitude longitude observations according digits argument. Average reflected temperature across observations averaged latitude longitude.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"output","dir":"Articles","previous_headings":"Reading and processing flight data","what":"Output","title":"Dealing with flight data","text":"final output tibble object columns latitude, longitude reflected temperature (ref_temp). number rows data set vary depending area covered flight number digits specified. instance, study area ~ 2900 \\(m^2\\), processed setting digits = 5 led tibble 7813 observations representing “tile” approximately 0.4 \\(m^2\\) latitude approximately 40°. raw .tif file processed, resulting tibble can already used quantify thermal characteristics study site spatially discrete perspective. illustrate , plot 4 34 fully processed flights (digits = 5) area offer throne package example data. Panel titles indicate hour flight took place","code":"## # A tibble: 7,813 × 3 ##    latitude longitude ref_temp ##       <dbl>     <dbl>    <dbl> ##  1     39.9     -120.     15.6 ##  2     39.9     -120.     16.5 ##  3     39.9     -120.     18.5 ##  4     39.9     -120.     17.0 ##  5     39.9     -120.     16.6 ##  6     39.9     -120.     16.6 ##  7     39.9     -120.     17.6 ##  8     39.9     -120.     17.0 ##  9     39.9     -120.     17.2 ## 10     39.9     -120.     15.5 ## # ℹ 7,803 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"adding-flight-metadata","dir":"Articles","previous_headings":"","what":"Adding flight metadata","title":"Dealing with flight data","text":"add_flight_metadta function adds information flight processed flight data outputted rnp_flight_data function. detail function’s inputs, processing output.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"inputs-1","dir":"Articles","previous_headings":"Adding flight metadata","what":"Inputs","title":"Dealing with flight data","text":"add_flight_data function takes 3 inputs: flight_data: processed flight data tibble obtained using rnp_flight_data function. flight_metadata: flight metadata file flight_id: identification (ID) flight present metadata file. documentation throne package includes example flight metadata flight includes information flight took place see : example file includes flight_id column columns date flight took place well time day flight started (HH:MM format, time_start) time day flight ended (time_end). Additionally, data set includes information whether ground control points (GCPs, see gcps column) used processing flight. Metadata files can include additional information like height drone flew flight, overall weather conditions etc. user wants consider analysis. NOTE: important flight_id, date, time_start time_end columns metadata file formatted like example file add_flight_metadata function work correctly.","code":"##   flight_id gcps      date time_start time_end ## 1   VAL2_01    N 8/24/2023       8:35     8:39 ## 2   VAL2_02    N 8/24/2023       8:59     9:03 ## 3   VAL2_03    N 8/24/2023       9:19     9:23 ## 4   VAL2_04    N 8/24/2023       9:42     9:46 ## 5   VAL2_05    N 8/24/2023      10:06    10:10 ## 6   VAL2_06    N 8/24/2023      10:38    10:42"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"processing","dir":"Articles","previous_headings":"Adding flight metadata","what":"Processing","title":"Dealing with flight data","text":"order add metadata specific flight processed, add_flight_metadata function goes following general steps. Extract metadata desired flight (specified via fligt_id) Using tools lubridate package, extract year Julian date (.e., day year) flight took place. Transform time_start time_end columns minutes day columns. Bind flight’s metadata processed flight data. NOTE: choose use Julian dates minutes day simplify management data much possible. Date time data unique data formats R environment often difficult handle users might lead unintended errors. using Julian dates minutes day, deal integer columns, much easier operate manipulate. , formats can easily transformed back easily interpretable scales visualization purposes, using .Date function transform Julian dates back YYYY-MM-DD format dividing 60 minutes day get hours.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"output-1","dir":"Articles","previous_headings":"Adding flight metadata","what":"Output","title":"Dealing with flight data","text":"final output rnp_flight_data function adding columns year, date, minute_start minute_end.","code":"## # A tibble: 7,813 × 8 ##    flight_id    latitude longitude ref_temp  year  date minute_start minute_end ##    <chr>           <dbl>     <dbl>    <dbl> <dbl> <dbl>        <dbl>      <dbl> ##  1 VAL02_GCP_01     39.9     -120.     15.6  2023   235          515        519 ##  2 VAL02_GCP_01     39.9     -120.     16.5  2023   235          515        519 ##  3 VAL02_GCP_01     39.9     -120.     18.5  2023   235          515        519 ##  4 VAL02_GCP_01     39.9     -120.     17.0  2023   235          515        519 ##  5 VAL02_GCP_01     39.9     -120.     16.6  2023   235          515        519 ##  6 VAL02_GCP_01     39.9     -120.     16.6  2023   235          515        519 ##  7 VAL02_GCP_01     39.9     -120.     17.6  2023   235          515        519 ##  8 VAL02_GCP_01     39.9     -120.     17.0  2023   235          515        519 ##  9 VAL02_GCP_01     39.9     -120.     17.2  2023   235          515        519 ## 10 VAL02_GCP_01     39.9     -120.     15.5  2023   235          515        519 ## # ℹ 7,803 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flight_data_add_flight_metadata.html","id":"integrated-processing-for-multiple-flights","dir":"Articles","previous_headings":"","what":"Integrated processing for multiple flights","title":"Dealing with flight data","text":"functions presented work single flight, nonetheless, majority occasions, users probably multiple flights process. , provide example code precisely via loop. NOTE: code take substantial amount time run. number flights, area covered flight number decimal digits flight data processed determine run time. Nonetheless, everything implemented correctly, flights need processed !. final output, include flight_id redundant information given two flights can happen time. implementing code 34 flights flown 2 days provided throne package, obtain data set 262803 observations.","code":"# read the flights metadata file for all flgihts flights_metadata <- read.csv(\"~/flights_metadata.csv\") # specify your own folder here  # define the folder where the .tif files are stored and list those files folder <- \"~/flights_raw_data\" # specify your own folder here flight_files_list <- paste(folder, \"/\", list.files(folder), sep = \"\")  # generate a dataset to store the flights data flights_data <- data.frame(latitude = c(), longitude = c(), ref_temp = c(),                            year = c(), date = c(), minute_start = c(), minute_end = c())  # loop through all flight files for(i in 1:length(flight_files_list)){    # read and process flight data for first flight   flight <- rnp_flight_data(file_path = flight_files_list[i], digits = 5)    # add flight metadata, use the list of files to specify the file ID   flight <- add_flight_metadata(flight_data = flight,                                 flight_id = str_sub(list.files(folder)[i], end = -5),                                 flight_metadata = flights_metadata)    # bind to holder data set   flights_data <- rbind(flights_data, flight)  }  # save the flights dataset save(flights_data, file = \"~/flights_data.RData\") # specify your own folder here ## # A tibble: 262,803 × 7 ##    latitude longitude ref_temp  year  date minute_start minute_end ##       <dbl>     <dbl>    <dbl> <dbl> <dbl>        <dbl>      <dbl> ##  1     39.9     -120.     15.6  2023   235          515        519 ##  2     39.9     -120.     16.5  2023   235          515        519 ##  3     39.9     -120.     18.5  2023   235          515        519 ##  4     39.9     -120.     17.0  2023   235          515        519 ##  5     39.9     -120.     16.6  2023   235          515        519 ##  6     39.9     -120.     16.6  2023   235          515        519 ##  7     39.9     -120.     17.6  2023   235          515        519 ##  8     39.9     -120.     17.0  2023   235          515        519 ##  9     39.9     -120.     17.2  2023   235          515        519 ## 10     39.9     -120.     15.5  2023   235          515        519 ## # ℹ 262,793 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otm_data_add_otm_metadata_gen_otm_splines.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Dealing with OTM data","text":"goal vignette illustrate process behind functions rnp_otm_data, add_otm_metadata gen_otm_splines throne package. first two functions allow reading processing multiple raw .csv files temperature measurements recorded using operative temperature models (OTM) data frame-like structure R (.e., tibble). gen_otm_splines function take processed OTM data generate OTM & date specific cubic spline models describe thermal dynamics OTM day. spline models later used correct flight data ultimately predict thermal landscapes. , highlight section package’s workflow covered vignette","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otm_data_add_otm_metadata_gen_otm_splines.html","id":"reading-and-processing-raw-otm-data","dir":"Articles","previous_headings":"","what":"Reading and processing raw OTM data","title":"Dealing with OTM data","text":"rnp_otm_data function (.e., read process OTM data) reads reads combines data set raw OTM files (.csv format) transforms R tibble. detail function’s inputs, processing outputs.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otm_data_add_otm_metadata_gen_otm_splines.html","id":"inputs","dir":"Articles","previous_headings":"Reading and processing raw OTM data","what":"Inputs","title":"Dealing with OTM data","text":"rnp_otm_data function takes 4 inputs: folder_path: character indicating location OTM .csv files stored. rows_skip: integer indicating many rows skipped reading .csv file. time_col: integer indicating column .csv corresponds time associated recording op_temp-col: integer indicating column .csv corresponds operative temperature measurement. specific way arguments used process data discussed next, want take second highlight importance rows_skip argument . Including ensures reading errors minimized. instance, software used program download data recorded Eye Buttons house inside OTMs OneWire Viewer returns .csv files several rows metadata measurement. rows lead incorrect reading raw data, see : contrast, skipping precisely 14 rows, can access recordings directly without formatting issues: TIP: recommend users throne package become familiar formatting raw OTM data. Specifying rows_skip argument correctly crucial rest package’s functions work properly line.","code":"otm_34 <- read.csv(\"data/otm_data/OTM34.csv\") ##                 X1.Wire.iButton.Part.Number..DS1921G.F5 ## 1  1-Wire/iButton Registration Number: 3300000059DFE621 ## 2                              Is Mission Active?  true ## 3          Mission Start:  Thu Aug 24 06:04:00 PDT 2023 ## 4                       Sample Rate:  Every 2 minute(s) ## 5                     Number of Mission Samples:  18947 ## 6                                 Total Samples:  89897 ## 7                             Roll Over Enabled?  false ## 8           Roll Over Occurred?  Roll over has occurred ## 9                            Active Alarms:  None fired ## 10                       Next Clock Alarm At:  Disabled ## 11                    High Temperature Alarm:  85 \\xb0C ## 12                    Low Temperature Alarm:  -40 \\xb0C ## 13                                            Date/Time ## 14                                                 Unit ## 15                                                Value read.csv(\"data/otm_data/OTM34.csv\", skip = 14) ##             Date.Time Unit Value ## 1  8/24/23 6:04:00 AM    C    14 ## 2  8/24/23 6:06:00 AM    C    14 ## 3  8/24/23 6:08:00 AM    C    14 ## 4  8/24/23 6:10:00 AM    C    14 ## 5  8/24/23 6:12:00 AM    C    14 ## 6  8/24/23 6:14:00 AM    C    14 ## 7  8/24/23 6:16:00 AM    C    14 ## 8  8/24/23 6:18:00 AM    C    14 ## 9  8/24/23 6:20:00 AM    C    14 ## 10 8/24/23 6:22:00 AM    C    14 ## 11 8/24/23 6:24:00 AM    C    14 ## 12 8/24/23 6:26:00 AM    C    14 ## 13 8/24/23 6:28:00 AM    C    14 ## 14 8/24/23 6:30:00 AM    C    14 ## 15 8/24/23 6:32:00 AM    C    14"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otm_data_add_otm_metadata_gen_otm_splines.html","id":"processing","dir":"Articles","previous_headings":"Reading and processing raw OTM data","what":"Processing","title":"Dealing with OTM data","text":"transform raw .csv data R tibble, rnp_otm_data function go following general steps files contained folder specified via argument folder_path: Read .csv file skipping many rows specified within rows_skip argument. Select columns time operative temperature specified time_col op_temp_col arguments. Using tools lubridate package, extract year, Julian date minute day operative temperature measurement. NOTE: choose use Julian dates minutes day simplify management data much possible. Date time data unique data formats R environment often difficult handle users might lead unintended errors. using Julian dates minutes day, deal integer columns, much easier operate manipulate. , formats can easily transformed back easily interpretable scales visualization purposes, using .Date function transform Julian dates back YYYY-MM-DD format dividing 60 minutes day get hours. ALSO NOTE: OneWire Viewer, returns .csv files MM/DD/YY HH:MM:SS format. Data data format can translated time column using mdy_hms function lubridate package. Please note time column raw OTM dataset format rnp_otm_data function correctly.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otm_data_add_otm_metadata_gen_otm_splines.html","id":"outputs","dir":"Articles","previous_headings":"Reading and processing raw OTM data","what":"Outputs","title":"Dealing with OTM data","text":"final output tibble object columns OTM’s identification (otm_id), year, date (Julian date format), minute day (minute) operative temperature (op_temp). function worked correctly, resulting data set contain observations made OTM whose files located directory specified via argument folder_path. included data set characteristics 33 OTMs recorded period 4 days. present plot subset data:","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otm_data_add_otm_metadata_gen_otm_splines.html","id":"adding-otm-metadata","dir":"Articles","previous_headings":"","what":"Adding OTM metadata","title":"Dealing with OTM data","text":"add_otm_metadata function adds information OTMs OTM data frame obtained using rnp_otm_data function.function takes 2 inputs: otm_data: OTM data frame obtained using rnp_otm_data function otm_metadata: OTM metadata file part throne package documentation include example metadata file OTM. file contains information latitude, longitude elevation OTM deployed well information orientation microhabitat. add_otm_metadata simply merges original OTM data frame OTM metadata OTM identity. Leading data frame additional columns:  makes add_otm_metadata function extremely versatile use user can incorporate much metadata OTMs ad needed (e.g., size o color different OTM shapes deployed simultaneously etc.).","code":"head(otm_metadata) ##   otm_id microhabitat orientation latitude longitude elevation ## 1  OTM01      outcrop           N 39.86873 -119.6270   1311.73 ## 2  OTM21      outcrop          NW 39.86874 -119.6270   1312.04 ## 3  OTM07      outcrop           E 39.86876 -119.6271   1312.23 ## 4  OTM16      outcrop          SE 39.86876 -119.6271   1313.17 ## 5  OTM17      outcrop        Flat 39.86874 -119.6271   1311.31 ## 6  OTM28         rock        Flat 39.86873 -119.6272   1312.98 ##   otm_id year date minute op_temp microhabitat orientation latitude longitude ## 1  OTM01 2023  234    367    13.5      outcrop           N 39.86873  -119.627 ## 2  OTM01 2023  234    369    13.5      outcrop           N 39.86873  -119.627 ## 3  OTM01 2023  234    371    13.5      outcrop           N 39.86873  -119.627 ## 4  OTM01 2023  234    373    13.5      outcrop           N 39.86873  -119.627 ## 5  OTM01 2023  234    375    13.5      outcrop           N 39.86873  -119.627 ## 6  OTM01 2023  234    377    13.5      outcrop           N 39.86873  -119.627 ##   elevation ## 1   1311.73 ## 2   1311.73 ## 3   1311.73 ## 4   1311.73 ## 5   1311.73 ## 6   1311.73"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otm_data_add_otm_metadata_gen_otm_splines.html","id":"generating-otm-spline-models","dir":"Articles","previous_headings":"","what":"Generating OTM spline models","title":"Dealing with OTM data","text":"last step dealing OTM data fit cubic smoothing spline model individual OTM day ’s deployment field. spline model capture thermal dynamics OTM throughout given day. turn allows us predict temperature OTM experiences moment day based observations recorded day. fit models throne package includes gen_otm_splines function (Generate OTM cubic smoothing splines model). function takes OTM data frame generate via rnp_otm_data add_otm_metadata functions returns complex tibble. tibble include OTM’s identification associated metadata, together nested column containing spline model generated via native R function smooth.spline. call complex tibble precisely nesting splines column. resulting splines tibble contain many rows combinations unique otm_id date since spline model OTM every day deployed field: critical point gen_otm_splines function work correctly determining appropriate value knot_p argument. argument determines percentage observations recorded OTM given day used determine number knots smoothing spline model. short, number knots ultimately determine degrees freedom model \\(df = degree + k\\) \\(degree = 3\\) cubic splines. (see details). number degrees freedom determine “wiggliness” resulting model, words, number times resulting curve change direction. example, plot different spline models data using different knot_p parameter specifications.  decision knot_p value use dependent two things. First frequency OTM recording. can extrapolate many knots/day (knots/h) get based frequency recordings knot_p value according formula: \\[ Knot/h = Recordings/h \\cdot knot_p\\] instance, OTMs used programmed record temperature measurement every 2 minutes, leading total 30 observations per OTM/hour. Assuming knot_p = 0.1 indicate model 3 knots / h. second issue determines value knot_p study organism user R package. Generally OTMs equilibrate environmental temperature much faster organism represent difference equilibration time positively correlated mass organism due thermal inertia. words, body temperature organism lot thermal inertia exactly OTM. (Need work )","code":"## # A tibble: 132 × 6 ##    otm_id  year  date latitude longitude splines    ##    <chr>  <dbl> <dbl>    <dbl>     <dbl> <list>     ##  1 OTM01   2023   234     39.9     -120. <smth.spl> ##  2 OTM01   2023   235     39.9     -120. <smth.spl> ##  3 OTM01   2023   236     39.9     -120. <smth.spl> ##  4 OTM01   2023   237     39.9     -120. <smth.spl> ##  5 OTM02   2023   234     39.9     -120. <smth.spl> ##  6 OTM02   2023   235     39.9     -120. <smth.spl> ##  7 OTM02   2023   236     39.9     -120. <smth.spl> ##  8 OTM02   2023   237     39.9     -120. <smth.spl> ##  9 OTM03   2023   234     39.9     -120. <smth.spl> ## 10 OTM03   2023   235     39.9     -120. <smth.spl> ## # ℹ 122 more rows"},{"path":"https://ggcostoya.github.io/throne/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://ggcostoya.github.io/throne/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ww (2024). throne: Thermal drone - OTM integration. R package version 0.1.0, https://ggcostoya.github.io/throne/.","code":"@Manual{,   title = {throne: Thermal drone - OTM integration},   author = {Who wrote it},   year = {2024},   note = {R package version 0.1.0},   url = {https://ggcostoya.github.io/throne/}, }"},{"path":"https://ggcostoya.github.io/throne/reference/add_flight_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add flight metadata — add_flight_metadata","title":"Add flight metadata — add_flight_metadata","text":"Adds metadata (e.g., flight time) processed flight data frame","code":""},{"path":"https://ggcostoya.github.io/throne/reference/add_flight_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add flight metadata — add_flight_metadata","text":"","code":"add_flight_metadata(flight_data, flight_id, flight_metadata)"},{"path":"https://ggcostoya.github.io/throne/reference/add_flight_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add flight metadata — add_flight_metadata","text":"flight_data processed flight data frame generated function `rnp_flight_data` flight_id ID flight match metadata. flight_metadata flight metadata data frame.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/add_flight_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add flight metadata — add_flight_metadata","text":"flight data frame metadata.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/add_otm_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Add OTM metadata — add_otm_metadata","title":"Add OTM metadata — add_otm_metadata","text":"Adds metadata (e.g., location, orientation, microhabitat characterstis) existing OTM dataset","code":""},{"path":"https://ggcostoya.github.io/throne/reference/add_otm_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add OTM metadata — add_otm_metadata","text":"","code":"add_otm_metadata(otm_data, otm_metadata)"},{"path":"https://ggcostoya.github.io/throne/reference/add_otm_metadata.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add OTM metadata — add_otm_metadata","text":"otm_data OTM data frame generated using `rnp_otm_data.R` function. otm_metadata OTM metadata data frame otm_id column match `otm_data`","code":""},{"path":"https://ggcostoya.github.io/throne/reference/add_otm_metadata.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add OTM metadata — add_otm_metadata","text":"OTM data frame metadata included","code":""},{"path":"https://ggcostoya.github.io/throne/reference/apply_correction.html","id":null,"dir":"Reference","previous_headings":"","what":"Apply correction — apply_correction","title":"Apply correction — apply_correction","text":"Applies correction existing flight data frame transform operative temperature","code":""},{"path":"https://ggcostoya.github.io/throne/reference/apply_correction.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Apply correction — apply_correction","text":"","code":"apply_correction(flight_data, correction_factors)"},{"path":"https://ggcostoya.github.io/throne/reference/apply_correction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Apply correction — apply_correction","text":"flight_data flight data frame metadata can collection multiple flights binded together. correction_factors correction factor list obtain used `get_correction_factors` function.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/apply_correction.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Apply correction — apply_correction","text":"flight data operative temperature column","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_corr_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate validation data — gen_corr_data","title":"Generate validation data — gen_corr_data","text":"Generates validation dataset","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_corr_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate validation data — gen_corr_data","text":"","code":"gen_corr_data(flight, splines)"},{"path":"https://ggcostoya.github.io/throne/reference/gen_corr_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate validation data — gen_corr_data","text":"flight flight data frame splines OTM splines object generated `gen_otm_splines`","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_corr_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate validation data — gen_corr_data","text":"validation dataset","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate OTM splines — gen_otm_splines","title":"Generate OTM splines — gen_otm_splines","text":"Generate unique spline model OTM date (Julian) OTM measuring","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate OTM splines — gen_otm_splines","text":"","code":"gen_otm_splines(otm_data, knot_p)"},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate OTM splines — gen_otm_splines","text":"otm_data OTM data frame can () include metadata knot_p number knots spline taken percentage observations made given day.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate OTM splines — gen_otm_splines","text":"OTM splines complex tibble otm_id, date, metadata nested spline model objects column.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/get_correction_factors.html","id":null,"dir":"Reference","previous_headings":"","what":"Get correction estimates — get_correction_factors","title":"Get correction estimates — get_correction_factors","text":"Gets correction estimates correlation dataset","code":""},{"path":"https://ggcostoya.github.io/throne/reference/get_correction_factors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get correction estimates — get_correction_factors","text":"","code":"get_correction_factors(corr_data)"},{"path":"https://ggcostoya.github.io/throne/reference/get_correction_factors.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get correction estimates — get_correction_factors","text":"corr_data correlation dataset obtained using `gen_corr_data` function.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/get_correction_factors.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get correction estimates — get_correction_factors","text":"list three objects, first correction date & time dataset, second intercept third slope general temperature correction","code":""},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Match data — match_data","title":"Match data — match_data","text":"Matches pixel within given flights occured OTM.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match data — match_data","text":"","code":"match_data(flights_data, coverage, otm_splines)"},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match data — match_data","text":"flights_data flight data frame multiple flights coverage Number times given pixel needs covered flight considered. otm_splines OTM splines dataset obtained `gen_otm_splines` function","code":""},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match data — match_data","text":"match dataset pixel associated OTM.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict thermal landscape — predict_thermal_landscape","title":"Predict thermal landscape — predict_thermal_landscape","text":"Predict thermal landscape","code":""},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict thermal landscape — predict_thermal_landscape","text":"","code":"predict_thermal_landscape(matches, otm_splines, date, minute)"},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict thermal landscape — predict_thermal_landscape","text":"matches x otm_splines x date x minute x","code":""},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict thermal landscape — predict_thermal_landscape","text":"x","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flight_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process flight data — rnp_flight_data","title":"Read and process flight data — rnp_flight_data","text":"Read process thermal imaging data drone flight (`.tif` format)","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flight_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process flight data — rnp_flight_data","text":"","code":"rnp_flight_data(file_path, digits)"},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flight_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process flight data — rnp_flight_data","text":"file_path path folder `.tif` file stored. digits number decimal digits final output summarized .","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flight_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process flight data — rnp_flight_data","text":"Pending","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otm_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process OTM data — rnp_otm_data","title":"Read and process OTM data — rnp_otm_data","text":"Reads OTM files specified folder returns processed data frame.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otm_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process OTM data — rnp_otm_data","text":"","code":"rnp_otm_data(folder_path, rows_skip, time_col, op_temp_col)"},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otm_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process OTM data — rnp_otm_data","text":"folder_path Folder raw OTM files (.csv format) stored. rows_skip Rows skip OTM file get data. defaults zero specified. time_col Column within OTM file \"time\" variable stored. op_temp_col Column within OTM file operative temperature (\"op_temp\") variable stored.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otm_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process OTM data — rnp_otm_data","text":"data frame otm_id, year, date (Julian), minute (day) operative temperature.","code":""}]

[{"path":"https://ggcostoya.github.io/throne/articles/Drone_data.html","id":"a-note-on-flight-mission-planning","dir":"Articles","previous_headings":"","what":"A note on flight mission planning","title":"Collecting drone data","text":"throne package requires orthomosaic .tif-files construced using nadir thermal images field site. collect , need plan flight mission drone equipped thermal camera. examples vignette, use DJI Matrice 200 V2 quadcopter, Zenmuse XT2 camera mounted. Note thermal cameras usually much lower photo resolution field view visual cameras, high vertical horizontal photo overlap ratio recommended mission, well relatively high flight altitude (e.g. minimum 80%/80% mission altitude 300 ft/90 m ground level). , course, depends spatial scale studied landscape desired resolution thereof. Regardless, nake sure ’re mission built around thermal camera’s field view rather visual camera - especially ’re flying rugged landscape - otherwise risk running stitching issues processing photos! ’s generally good idea extend flight mission area exceed study site’s boundaries meters compensate difference.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/Drone_data.html","id":"collecting-thermal-imagery","dir":"Articles","previous_headings":"","what":"Collecting thermal imagery","title":"Collecting drone data","text":"flight mission details context dependent UAS camera setup, generally speaking, standard UAS mission planning etiquette applies collecting data use throne: Abide local laws regulations regarding flight altitude, airspace restrictions drone registration requirements. Check local authorities applies ! example, ’re flying U.S. airspace, adhere Code Federal Regulations (CFR) Part 107, make sure ’re Class G airspace, unless explicit permission fly elsewhere. may also required drone registered commercial use used research purposes. default drone flight path (“zig-zag line”) generally fine throne mapping purposes. Avoid long, narrow flight paths minimize banding issues, aim keep flight times relatively short take true “snapshot” thermal landscape. Fly weather conditions typical study system, strive towards distributing flights across different times day, maximize representation OTM data. One important factors maximizing strength throne model minimize geolocation errors photos. can compensated post-processing, deploying ground control points (GCPs) one common methods can used preventative measure accurately georeference flight missions. recommend deploying minimum three GCPs per field site aim survery - simple black--white square tiles known GPS locations works just fine - crucial deployed flights visible photos mission. information GCPs, PIX4D great article correlate accuracy drone maps.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/Drone_data.html","id":"processing-flight-data","dir":"Articles","previous_headings":"","what":"Processing flight data","title":"Collecting drone data","text":"collected thermal photos multiple flights, can begin photogrammetry produce thermal orthomosaic images can used throne package. plenty software capable , comes set pros cons. examples, use PIX4Dmapper, yet software might accessible everyone. OpenDroneMap offers web-based, open-source free solution, won’t cover , yet might valuable option users. Note also PIX4D extensive online database use software (“-” videos articles), ranging load images editing raster images. may prove helpful haven’t used software , find something guide unclear confusing. Regardless, start opening PIX4Dmapper. … Create project clicking “New Project” “File”. Navigate folder ’re flight mission photos stored, wish project folder saved. ’s generally good approach one folder per flight mission, can… Select photos (visual thermal images) flight mission, photos relevant specific flight. prompted, select Thermal Camera default processing template. visible menu ’ve added loaded photos project. information, see PIX4D’s article Processing Options Default Templates Ensure “Pixel Size” “Focal Length” values correctly set camera model: menu bar, click Project > Image Properties Editor… section Selected Camera Model, click Edit… step--step instructions modify camera model, refer PIX4D’s article use Editing Camera Model Options. begin processing, open “Processing Options” navigate Keypoints Image Scale “Initial Processing” set Full; navigate “Point Cloud Mesh” Point Cloud set Image Scale 1 (original). settings increase density keypoints resolution final product, cost processing time. (can leave values unchanged, note quality throne model likely impacted.) wish, can save custom template future throne flight processes, clicking “Save Template”. wish use (don’t access ) ground control points, go ahead click “Start” Processing bar begin processing images. thermal landscape map generated final step, “3. DSM, Orthomosaic, Index.”. Processing time depends PC specifications size project, usually lasts couple hours. can adjust resources (GB RAM CPU threads) PIX4Dmapper use “Processing options”. Note default use PC’s available resources!","code":""},{"path":"https://ggcostoya.github.io/throne/articles/Drone_data.html","id":"note-on-gcps","dir":"Articles","previous_headings":"Processing flight data","what":"Note on GCPs","title":"Collecting drone data","text":"wish include ground control points project, make sure import start processing. PIX4D extensive -guides topic, applies generating raster images throne well. general advice: ’ve loaded GCP points, appear “pins” point cloud, visible rayCloud viewer. Manually match photos GCPs visible using rayCloud editor. Refer PIX4D documentation information. Continue “Reoptimize” project, “Process” drop-menu continue second third processing steps. ’re using DJI drone, may encounter issues importing GCP coordinates .csv-file. case, first manually create tie points mark GCPs photos (identical names labels .csv-file) import coordinates using “GCP/MTP Manager”. Finish clicking “Rematch Optimize”, “Process” dropdown menu. PIX4D automatically create subfolders processing step project, contained main folder specified directory loading photos. final thermal orthomosaic image found project’s subfolder named “3_dsm_ortho” “2_mosaic”. two .tif-files folder. Extract one visual orthomosaic (.e. non-black--white image). Export directory building throne model!","code":""},{"path":"https://ggcostoya.github.io/throne/articles/OTM_data.html","id":"programming-ibuttons","dir":"Articles","previous_headings":"","what":"Programming iButtons","title":"Collecting OTM data","text":"deploying OTMs, iButton needs individually programmed using USB-connected 1-Wire adapter, DS9490B, DS1402D-DR8+. iButton reader connected, iButton can inserted programming downloading data. begin, download OneWireViewer (iButton) programming software, Analog devices. link software’s download page can found , instructional video get started can found . Note software Java-based applet, ’ll need install Java haven’t already. Insert iButton reader available USB-port, install software launch . … ’s first time ’re launching software, might select USB port reader connected . Choose USB-port drop-list prompted. Insert iButton reader. iButton working ’ll show device serial number software’s left window panel; iButton show likely dead malfunctioning. Select iButton list devices left, go “Thermochron” tab. Click “Start new mission” start programming iButton. Check box says “Synchronize Real-time Clock”. make sure iButton’s internal real-time clock synchronized time PC. Enter “Sampling Rate”, minutes. Enter “Mission Start Delay”, time first data sample collected. Note minutes; example, wish start recording data 24 hours, enter “1440” delay value. Make sure “Enable Rollover” enabled, unless want data overwritten memory full. Typically, iButton can hold 2048 measurements. ’ll need maths figure memory full / OTMs retrieved redeployed! ’ve gone steps, line reads “Mission Active?” change “False” “True” within second two. ’ll also see “First sample yet collected”. iButton ready inserted OTM deployed field.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/OTM_data.html","id":"reading-ibutton-data","dir":"Articles","previous_headings":"","what":"Reading iButton data","title":"Collecting OTM data","text":"process downloading data iButtons similar programming process. Assuming 1-Wire adapter connected, insert iButton reader start OneWireViewer software. Select iButton software’s left window pane Navigate “Thermocron” tab, “Temperatures”. reader take second display graph temperatures plotted time. graph shows , right-click anywhere within graph window drop-menu appear. Select “Save Data .csv File”. Save file directory work throne data. data remain iButton programmed anew. Note start new mission, old mission data lost, make sure data downloaded redeployment.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Case study: Thermoregulation in high elevation lizards.","text":"vignette illustrate case study serve example use tools provided throne package. example looking population western fence lizards (Sceloporus occidentalis) living ~ 2400 m sea level Great Basin Desert Northern Nevada.   population underwent mark-recapture summer 2022. individuals uniquely identified via toe-clipping , upon capture recorded location individual (.e., latitude longitude) using Trimble Geo7x GPS accuracy ~0.5 \\(m^2\\), time (.e., year, day year doy minute day mod). Additionally, lizards recorded body temperature measurement (tb) inserting thermocouple probe animal’s cloaca: data goal : Quantify distribution temperatures experienced lizards. Assess relationship tb temperatures available gauge ability behaviorally thermoregulate environment. achieve goals can use methodology developed throne package detail :","code":"lizard_mr ## # A tibble: 170 × 8 ##    id    sex    year   doy   mod latitude longitude    tb ##    <chr> <chr> <int> <dbl> <dbl>    <dbl>     <dbl> <dbl> ##  1 H001  F      2022   173   583     39.7     -119.  30.5 ##  2 H004  M      2022   173   657     39.7     -119.  34.8 ##  3 H005  M      2022   173   678     39.7     -119.  33.5 ##  4 H006  F      2022   173   702     39.7     -119.  35.3 ##  5 H007  M      2022   173   723     39.7     -119.  33.2 ##  6 H008  F      2022   173   724     39.7     -119.  32.2 ##  7 H009  M      2022   173   753     39.7     -119.  33.6 ##  8 H010  F      2022   173   795     39.7     -119.  31.9 ##  9 H014  M      2022   173   922     39.7     -119.  NA   ## 10 H015  M      2022   173   941     39.7     -119.  NA   ## # ℹ 160 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"otm-deployement","dir":"Articles","previous_headings":"","what":"OTM deployement","title":"Case study: Thermoregulation in high elevation lizards.","text":"deployed total 128 operative temperature models (OTMs) randomly site recorded 1 operative temperature measurement per hour.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"flights","dir":"Articles","previous_headings":"","what":"Flights","title":"Case study: Thermoregulation in high elevation lizards.","text":"flew 3 flights ~ 95000 \\(m^2\\) area overlapping areas surveyed part lizard mark-recapture. Two flightswere conducted day (08/04/2022) 07:55 11:21 third flight conducted 2 days later 16:05","code":"c_flights_metadata ##    flight_id     date time_start time_end ## 1 c_flight_1 8/6/2022      16:05    16:28 ## 2 c_flight_2 8/4/2022      11:21    11:45 ## 3 c_flight_3 8/4/2022       7:55     8:19"},{"path":[]},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"reading-and-processing-flights-data","dir":"Articles","previous_headings":"R workflow","what":"Reading and processing flights data","title":"Case study: Thermoregulation in high elevation lizards.","text":"Following R workflow specified throne package, first step read process flights data. important part step specify digits argument set spatial resolution tiles final thermal landscape prediction. example, choose set digits = 5 , latitude, lead tile area ~ 0.95 \\(m^2\\), representative micro habitat lizard might experiencing. read process flights data using rnp_flights_data function follows: outcome flights data tibble storing surface temperature (ir_temp) measurements collected across flights: can plot data using ggplot tools already get sense thermal characteristics site:","code":"# set files path flight_files_path <- \"x\" # This would be a folder within the user's computer, not specified here  # read the metadata file  c_flights_metadata <- read.csv(\"data/case_flight_data.csv\")  # read and process flights data c_flights_data <- rnp_flights_data(path = flight_files_path, metadata = c_flights_metadata, digits = 5) c_flights_data ## # A tibble: 304,368 × 7 ##    longitude latitude ir_temp  year   doy mod_start mod_end ##        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> ##  1     -119.     39.7    17.8  2022   218       965     988 ##  2     -119.     39.7    18.2  2022   218       965     988 ##  3     -119.     39.7    13.5  2022   218       965     988 ##  4     -119.     39.7    26.8  2022   218       965     988 ##  5     -119.     39.7    24.5  2022   218       965     988 ##  6     -119.     39.7    18.0  2022   218       965     988 ##  7     -119.     39.7    27.3  2022   218       965     988 ##  8     -119.     39.7    27.2  2022   218       965     988 ##  9     -119.     39.7    22.1  2022   218       965     988 ## 10     -119.     39.7    22.7  2022   218       965     988 ## # ℹ 304,358 more rows c_flights_data %>%    ggplot(aes(x = longitude, y = latitude, fill = ir_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(mod_start))"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"reading-and-processing-otms-data","dir":"Articles","previous_headings":"R workflow","what":"Reading and processing OTMs data","title":"Case study: Thermoregulation in high elevation lizards.","text":"next step read process data collected via OTMs. can using rnp_otms_data function throne package. , check structure raw OTM .csv files. example look like : taking look (files) can tell need skip rows reading .csv means can set rows_skip argument rnp_otms_data 1, can start reading first row. can also see column raw_data_time contains information date time measurement thus, set date_col argument 1. also specify time_col = 1, ’s necessary time_col specified, rnp_flights_data assume date_col = time_col. Lastly, can see file operative temperature measurements stored third column , result, set op_temp_col argument 2. mind, can read process OTM data follows: outcome otm data tibble containing observations made OTMs: seen , OTMs fell within area covered flights. presenting subset flights collected lizard observations. Nonetheless, fact thermal dynamics given OTM (position) characteristic use predict thermal landscapes, can use OTMs fell outside area interest long recording time flights took place:","code":"##     raw_date_time temp otm ## 1 6/13/2022 14:18 27.0 H22 ## 2 6/13/2022 15:18 18.0 H22 ## 3 6/13/2022 16:18 21.5 H22 ## 4 6/13/2022 17:18 16.0 H22 ## 5 6/13/2022 18:18 10.0 H22 ## 6 6/13/2022 19:18  8.0 H22 # speficy the path to where the OTM .csv files are stored c_otms_path <- \"data/case_otm_data\"  # specify the OTM metadata file  c_otms_metadata <- read.csv(\"data/case_otm_metadata.csv\")  # read and process OTMs data c_otms_data <- rnp_otms_data(path = c_otms_path, metadata = c_otms_metadata, rows_skip = 1, date_col = 1, op_temp_col = 2) as_tibble(c_otms_data) ## # A tibble: 262,016 × 7 ##    otm_id  year   doy   mod op_temp latitude longitude ##    <chr>  <dbl> <dbl> <dbl>   <dbl>    <dbl>     <dbl> ##  1 H1      2022   164   910    15       39.7     -119. ##  2 H1      2022   164   970    17       39.7     -119. ##  3 H1      2022   164  1030    16       39.7     -119. ##  4 H1      2022   164  1090    15.5     39.7     -119. ##  5 H1      2022   164  1150    13       39.7     -119. ##  6 H1      2022   164  1210     9       39.7     -119. ##  7 H1      2022   164  1270     4       39.7     -119. ##  8 H1      2022   164  1330     2.5     39.7     -119. ##  9 H1      2022   164  1390     2       39.7     -119. ## 10 H1      2022   165    10     1       39.7     -119. ## # ℹ 262,006 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"building-otm-spline-models","dir":"Articles","previous_headings":"R workflow","what":"Building OTM spline models","title":"Case study: Thermoregulation in high elevation lizards.","text":"read OTMs data, next step define cubic splines models describe thermal dynamics OTM doy deployment. , can use gen_otm_splines function throne package. step, crucial user input knot_p parameter determine “wiggliness” spline model. Choosing th appropriate knot_p value dependent recording frequency set OTMs thermal properties organism interest . Based thermal properties organism interest (Sceloporus occidentalis), ideally spline model 1 knot every 15 minutes OTMs recorded afrequency 1 observation / hour. frequency, want preserve much information thermal fluctuations OTM possible setting knot_p = 1 works fine. obtain spline models, can simply run: returns nested tibble otm_id & doy specific models (column spline):","code":"c_otms_splines <- gen_otm_splines(otm_data = c_otms_data, knot_p = 1) c_otms_splines ## # A tibble: 11,008 × 6 ##    otm_id  year   doy latitude longitude spline     ##    <chr>  <dbl> <dbl>    <dbl>     <dbl> <list>     ##  1 H1      2022   164     39.7     -119. <smth.spl> ##  2 H1      2022   165     39.7     -119. <smth.spl> ##  3 H1      2022   166     39.7     -119. <smth.spl> ##  4 H1      2022   167     39.7     -119. <smth.spl> ##  5 H1      2022   168     39.7     -119. <smth.spl> ##  6 H1      2022   169     39.7     -119. <smth.spl> ##  7 H1      2022   170     39.7     -119. <smth.spl> ##  8 H1      2022   171     39.7     -119. <smth.spl> ##  9 H1      2022   172     39.7     -119. <smth.spl> ## 10 H1      2022   173     39.7     -119. <smth.spl> ## # ℹ 10,998 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"correcting-flights-data","dir":"Articles","previous_headings":"R workflow","what":"Correcting flights data","title":"Case study: Thermoregulation in high elevation lizards.","text":"Due [inherent differences physical properties surface temperature measurements IR camera operative temperature measurements OTM] (https://ggcostoya.github.io/throne/articles/correcting_flight_data.html#overview), next step throne package workflow correct data obtained via flights using OTM flights data. achieve , use correct_flighs_data function follows: can visualize effects correction process (Post-correction) respect data original flights (Pre-correction).","code":"c_flights_data_corr <- correct_flights_data(flights-data = c_flights_data, otm_splines = c_otms_splines) pre_corr <- c_flights_data %>%    ggplot(aes(x = longitude, y = latitude, fill = ir_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(mod_start)) +   ggtitle(\"Pre-correction\")   post_corr <- c_flights_data_corr %>%    ggplot(aes(x = longitude, y = latitude, fill = op_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(mod_start)) +   ggtitle(\"Post-correction\")     grid.arrange(pre_corr, post_corr, nrow = 2, ncol = 1)"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"matching-tiles-to-otm-dynamics","dir":"Articles","previous_headings":"R workflow","what":"Matching tiles to OTM dynamics","title":"Case study: Thermoregulation in high elevation lizards.","text":"last step able predict thermal landscapes match thermal dynamics tiles within corrected flights data dynamics given OTM. achieve , can use match_data function throne package. use function, two user-specific inputs needed: coverage_per error_max. first one determines degree coverage across multiple flights tile needs order considered matching process. seen , flights particularly good overlap:  case, can set coverage_per = 1 ensure areas covered across flights considered although, greater number flights recommend setting coverage_per = 0.9. second input (error_max) determines maximum average absolute error tile OTM dynamics specified threshold matching. average absolute difference tile’s thermal dynamics OTM best describes > error_max, tile matched OTM thus considered. case, follow specifications set error_max = 5. Now, can run match_data function follows: result matches tibble OTM best describes dynamics tile site. figure , tile colored according otm_id best represents ’s thermal dynamics.","code":"c_flights_data_corr %>%    group_by(latitude, longitude) %>%    summarise(coverage_per = 100*(n()/3)) %>%    ggplot(aes(x = longitude, y = latitude)) +   geom_raster(aes(fill = coverage_per)) +   guides(fill = guide_colorbar(title = \"Coverage (%)\")) c_matches <- match_data(flights_data = c_flights_data_corr, otm_splines = c_otms_splines, coverage_per = 1, error_max = 5) c_matches ## # A tibble: 98,363 × 4 ##    latitude longitude otm_id  error ##       <dbl>     <dbl> <chr>   <dbl> ##  1     39.7     -119. NA     NA     ##  2     39.7     -119. H121    0.842 ##  3     39.7     -119. H6      2.17  ##  4     39.7     -119. H16     3.06  ##  5     39.7     -119. H4      1.39  ##  6     39.7     -119. H56     2.44  ##  7     39.7     -119. H78     2.15  ##  8     39.7     -119. H132    2.89  ##  9     39.7     -119. H36     1.86  ## 10     39.7     -119. H6      1.32  ## # ℹ 98,353 more rows"},{"path":[]},{"path":[]},{"path":"https://ggcostoya.github.io/throne/articles/correcting_flight_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Correcting flight data","text":"vignette, aim illustrate correct temperature data obtained using thermal photogrammetry. correcting, referring process transforming temperature measurements made via IR cameras mounted drone operative temperatures measured using operative temperature model (OTM). highlight section package’s workflow covered vignette:  need correction stems fundamental difference temperature estimates made using IR camera made making physical contact object. IR camera measurement influenced wide range factors including object’s emissivity, conditions image taken (ambient temperature, amount light etc. see Playà-Montmany & Tattersall 2021 details). contrast, OTMs designed record temperature measurements match internal body temperature organism closely possible. achieved enclosing temperature logger (e.g., iButton) inside structure similar size similar surface properties organism interest. methodology used extensively field thermal ecology recent advances minimized costs production maximized accuracy OTMs (see past work Alujević et al. 2024). Due , IR camera drone OTM ultimately record fundamentally different temperature metrics. thermal measurements estimated using drone truly representative organism experiencing, must corrected instead describe operative temperatures.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/correcting_flight_data.html","id":"the-correct_flights_data-function","dir":"Articles","previous_headings":"","what":"The correct_flights_data function","title":"Correcting flight data","text":"transform temperature measurements obtained using drone-mounted IR camera operative temperature measurements, throne package includes correct_flights_data function. function perform double correction data obtained flight correcting 1) differences light conditions across multiple flights 2) inherent difference physical properties IR operative temperature measurements.perform correction, function take 2 inputs: flights_data tibble obtained rnp_flights_data function like one : otm_splines complex tibble obtained generate_otm_splines function like one seen : data sets contain latitude longitude information. crucial step correction process, first task filter flights_data contain tiles (.e., unique latitude longitude combinations) OTMs actually deployed. tiles filtered, use spline models estimate temperature OTM exact year, day year (doy) minute day (mod) flights took place. result tibble unique latitude & longitude unique year, doy mod IR temperature measurement (ir_temp, drone) associated operative temperature measurement (op_temp, OTM) seen : tibble contains mod_start mod_end columns. mod flight started flight ended. example data, flights relatively fast (~ 4 minutes) cover larger areas flights going longer. case, predicted operative temperature (op_temp) OTM tile average temperature duration flight. Using data can visualize need correction:  shown , consistent bias two measurements, IR temperatures generally cooler operative temperatures high values opposite holding true low values. Note line best linear fit substantially different gray line indicates ideal 1:1 relationship. can easily appreciated running simple linear regression ir_temp op_temp. (Intercept) slope (.e., Estimate op_temp ) 6.23 0.75 , ideally, want 0 1 respectively. \\(R^2\\) (R-squared model’s output) relationship 0.625, improved match two measurements also want \\(R^2\\) closer 1. step implement first correction, date time flight. flights took place different days different mod environmental temperature light conditions variable. can visualize bias measurements (.e., op_temp - ir_temp) different depending mod.  Flights closer middle day (.e., ~ 11:00 - 13:00 mod 660 - 800) light conditions optimal tend less biased whereas flights earlier morning afternoon affected . Based , first correction 1) caculate average bias flight 2) subtract bias ir_temp measurements flight. correction implemented relationship ir_temp op_temp looks like:  Although model’s Intercept slope worsened (6.22 12.11 0.74 0.69) \\(R^2\\) model improved (0.625 0.678) can appreciated reduced amount error around line best fit. , apply second correction correcting temperature value . using estimates linear regression correct IR temperature measurements (already corrected year, doy mod, indicated *) operative measurements following formula: \\[Operative\\;Temperature = - Intercept + (2 - Slope)\\cdot IR\\; Temperature^*\\] implement formula can see Intercept relationship now 3.76 slope 0.9 much closer desired values 0 1 respectively. also apparent plotting relationship line best fit now close 1:1 line.  example effects correction across flights provided example data sets throne package. columns across panels indicate plot shows thermal landscape IR temperatures (Pre-correction) corrected IR temperatures now operative temperatures (Post-correction). rows indicate mod day flight took place:  correction results slight shift, generally towards warmer wider temperature distributions higher mean temperature variance:","code":"flights_data ## # A tibble: 263,008 × 7 ##    longitude latitude ir_temp  year   doy mod_start mod_end ##        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> ##  1     -120.     39.9    12.5  2023   236       515     519 ##  2     -120.     39.9    14.4  2023   236       515     519 ##  3     -120.     39.9    14.0  2023   236       515     519 ##  4     -120.     39.9    13.7  2023   236       515     519 ##  5     -120.     39.9    14.6  2023   236       515     519 ##  6     -120.     39.9    15.3  2023   236       515     519 ##  7     -120.     39.9    14.5  2023   236       515     519 ##  8     -120.     39.9    14.5  2023   236       515     519 ##  9     -120.     39.9    13.9  2023   236       515     519 ## 10     -120.     39.9    13.9  2023   236       515     519 ## # ℹ 262,998 more rows otms_splines ## # A tibble: 132 × 9 ##    otm_id  year   doy microhabitat orientation latitude longitude elevation ##    <chr>  <dbl> <dbl> <chr>        <chr>          <dbl>     <dbl>     <dbl> ##  1 OTM01   2023   236 outcrop      N               39.9     -120.     1312. ##  2 OTM01   2023   237 outcrop      N               39.9     -120.     1312. ##  3 OTM01   2023   238 outcrop      N               39.9     -120.     1312. ##  4 OTM01   2023   239 outcrop      N               39.9     -120.     1312. ##  5 OTM02   2023   236 outcrop      W               39.9     -120.     1313. ##  6 OTM02   2023   237 outcrop      W               39.9     -120.     1313. ##  7 OTM02   2023   238 outcrop      W               39.9     -120.     1313. ##  8 OTM02   2023   239 outcrop      W               39.9     -120.     1313. ##  9 OTM03   2023   236 rock         W               39.9     -120.     1317. ## 10 OTM03   2023   237 rock         W               39.9     -120.     1317. ## # ℹ 122 more rows ## # ℹ 1 more variable: spline <list> correction_data ## # A tibble: 1,114 × 8 ##    latitude longitude  year   doy mod_start mod_end ir_temp op_temp ##       <dbl>     <dbl> <dbl> <dbl>     <dbl>   <dbl>   <dbl>   <dbl> ##  1     39.9     -120.  2023   236       515     519    25.4    30.0 ##  2     39.9     -120.  2023   236       515     519    20.5    26.8 ##  3     39.9     -120.  2023   236       515     519    27.8    30.3 ##  4     39.9     -120.  2023   236       515     519    21.3    28.3 ##  5     39.9     -120.  2023   236       515     519    28.0    33.8 ##  6     39.9     -120.  2023   236       515     519    20.4    19.7 ##  7     39.9     -120.  2023   236       515     519    19.1    21.3 ##  8     39.9     -120.  2023   236       515     519    22.9    28.5 ##  9     39.9     -120.  2023   236       515     519    22.1    28.2 ## 10     39.9     -120.  2023   236       515     519    19.9    30.5 ## # ℹ 1,104 more rows summary(lm(ir_temp ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = ir_temp ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -17.3750  -2.5640   0.0021   2.7808  17.1201  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept)   6.2269     0.6906   9.017   <2e-16 *** ## op_temp       0.7492     0.0174  43.052   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 4.184 on 1112 degrees of freedom ## Multiple R-squared:  0.625,  Adjusted R-squared:  0.6247  ## F-statistic:  1853 on 1 and 1112 DF,  p-value: < 2.2e-16 summary(lm(ir_temp_corr ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = ir_temp_corr ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -15.3410  -2.3108  -0.0795   2.0655  18.2656  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept) 12.11754    0.56523   21.44   <2e-16 *** ## op_temp      0.68946    0.01424   48.40   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 3.424 on 1112 degrees of freedom ## Multiple R-squared:  0.6781, Adjusted R-squared:  0.6778  ## F-statistic:  2343 on 1 and 1112 DF,  p-value: < 2.2e-16 # estimate op_temp after correction correction_data$op_temp_corr <- -12.11754 + (2 - 0.68946)*correction_data$ir_temp_corr summary(lm(op_temp_corr ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = op_temp_corr ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -20.1051  -3.0285  -0.1041   2.7070  23.9378  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept)  3.76298    0.74075    5.08 4.43e-07 *** ## op_temp      0.90356    0.01867   48.40  < 2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 4.488 on 1112 degrees of freedom ## Multiple R-squared:  0.6781, Adjusted R-squared:  0.6778  ## F-statistic:  2343 on 1 and 1112 DF,  p-value: < 2.2e-16"},{"path":"https://ggcostoya.github.io/throne/articles/correcting_flight_data.html","id":"a-worked-out-example","dir":"Articles","previous_headings":"","what":"A worked out example","title":"Correcting flight data","text":"Implementing correct_flights_data function straightforward. Say user flights tibble called flights_datax OTM splines complex tibble called otm_splinesx, correct flights data user simply need run following code.","code":"corrected_flights_datax <- correct_flights_data(flights_data = flights_datax, otm_splines = otm_splinesx)"},{"path":"https://ggcostoya.github.io/throne/articles/predicting_thermal_landscapes.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Predicting Thermal Landscapes","text":"vignette, goal illustrate process behind final step workflow throne package, prediction spatio-temporally complete thermal landscapes. achieve , throne uses two functions: match_data predict_thermal_landscpe. first allows user match thermal dynamics given tile within site (.e., unique latitude longitude) measured across multiple flights operative temperature model (OTM). second, uses matches data set combines information date & OTM specific cubic spline models (obtained using gen_otm_splines) function package predict temperature tile site moment time OTMs deployed field. context overall workflow package, section covered vignette:  Finally, also provide information predictive accuracy method , present accompanying manuscript, high.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/predicting_thermal_landscapes.html","id":"the-match_data-function","dir":"Articles","previous_headings":"","what":"The match_data function","title":"Predicting Thermal Landscapes","text":"match_data function matches thermal dynamics specific tiles (.e., unique latitude longitude combinations) collected across multiple flights thermal dynamics operative temperature model (OTM). , function takes following inputs inherited previous functions : flights_data tibble obtained using rnp_flights_data. strongly recommend tibble undergoes correction using correct_flights_data function order ensure flights_data tibble OTMs operative temperature scale. However, function allow user use uncorrected flights_data tibble choose. otm_splines complex tibble obtained using gen_otm_splines function. Additionally, match_data also requires 2 user specified inputs: coverage_per, numeric value 0 - 1 indicating minimum coverage tile across flights provided order t included matching. need input can easily visualized overlapping area covered multiple flights provided example flights_data (see image ). Due unique conditions 34 flights conducted perform study (e.g., wind etc.), area covered flights variable specially focusing around edges. Nonetheless, foresaw effect ensured area covered flight much larger area interest study, precaution recommend users package follow. goal area OTMs covered flights , seen , OTMs deployed ground (black dots) fell areas covered vast majority flights. general guideline, recommend setting coverage_per >= 0.9  error_max, maximum error temperature measurements tile OTM best represents , develop next. match tiles OTMs best describe thermal dynamics, match_data function goes following general steps: calculates coverage across flights every single tile covered selects tiles bee covered much coverage_per argument specifies. tile, calculate average absolute error temperature measurements tile flight temperature measurements made every OTMs exact time flight took place. Select OTM minimizes error tile’s OTMs measurements. figure illustrate logic approach. black dots indicate temperature measurements associated given tile (note measurements corrected using correct_flights_data function) across flights occurred days year (doy) 236, 237 238. red blue lines indicate temperatures predicted spline model 2 OTMs doy. case, match_data function choose OTM25 better represent dynamics tile average different tile’s temperature measurements estimated cubic spline model OTM much smaller OTM05.  NOTE: distance tile OTM weighted step. OTM necessarily closest tile might actually able represent thermal dynamics much better one closer. example, tile contains tree might represented OTM deployed inside tree 100 m one southern facing slope 2 m away. approach extends even tile OTM deployed. Imagine tile mostly facing south small bush . OTM placed precisely bush, thermal dynamics might representative average dynamics tile OTM placed elsewhere might actually represent tile better. figure show results matching example data set, 5 cases OTM tile best described thermal dynamics.  minimum error certain threshold indicated error_max parameter assign OTM tile. figure show results implementing step areas marked dark blue indicating tiles one OTM best describe without exceeding threshold imposed error_max. also important note “problematic” tiles far area interest study (OTMs, indicated black dots, deployed) area error minimized.  NOTE: figure shades light gray tiles covered least 1 flights covered least 90% flights. seen , high-coverage area much smaller total area covered flights. resulting matches tibble otm_id column indicating OTM best describes given tile (.e., combination o latitude longitude) well column matching error user check desired. rows error > error_max otm_id specified NA. matches data gather interesting findings. Including : OTMs needed explain majority sites thermal dynamics. example data set, 5 33 OTMs deployed needed explain >50% variability site 21 explain >95%.  matching mechanism automatically match tiles given orientation OTMs deployed tile orientation. seen considering site plotted N-S orientation, can, example, OTMs facing W best described tiles western slope .","code":"matches ## # A tibble: 6,386 × 4 ##    latitude longitude otm_id error ##       <dbl>     <dbl> <chr>  <dbl> ##  1     39.9     -120. OTM26   3.60 ##  2     39.9     -120. OTM26   3.61 ##  3     39.9     -120. OTM14   2.96 ##  4     39.9     -120. OTM26   2.93 ##  5     39.9     -120. OTM26   3.14 ##  6     39.9     -120. OTM02   2.45 ##  7     39.9     -120. OTM26   2.61 ##  8     39.9     -120. OTM26   2.71 ##  9     39.9     -120. OTM26   2.50 ## 10     39.9     -120. OTM26   2.98 ## # ℹ 6,376 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/predicting_thermal_landscapes.html","id":"predicting-thermal-landscapes","dir":"Articles","previous_headings":"","what":"Predicting thermal landscapes","title":"Predicting Thermal Landscapes","text":"final step workflow throne package predict thermal landscapes. , thonre package includes function predict_thermal_landscape takes following inherited inputs: otm_splines complex tibble obtained generate_otm_splines. matches tibble associating tiles study area OTMs best describe thermal dynamics obtained using match_data function discussed . addition, predict_thermal_landscape function require new user-specified inputs: day year doy (single multiple) prediction generated. minute day mod (single multiple) doy specified prediction generated. inputs specified, function go following general steps: Filter provided otm_splines splines characterizing OTMs also present matches tibble among select models describing dynamics OTM doy (single multiple) specified argument function. Predict operative temperature specified mod (single multiple) doy OTMs. Merge operative temperature prediction matches tibble obtain predicted operative temperature every single tile considered. Since necessary calculations carried hand (.e., generating spline models, performing matching tiles OTMs etc.) predict_thermal_landscape function relatively fast allows user predict entire thermal landscape site moment OTMs deployed. example, say want obtain complete thermal landscape prediction every hour day doy = 237 (.e., August 24th), one simply run: NOTE: predict_thermal_landscape function able predict thermal landscapes specified time falls outside range OTMs measuring. end, function also provide warning indicating % predictions removing due falling outside range OTMs recording. can plot prediction using regular ggplot tools easily :  plot combined single image using tools gganimate package:  predict_thermal_landscape function unlimited power provide complete thermal landscape predictions unprecedented level detail.","code":"# obtain prediction prediction_237 <- predict_thermal_landscape(matches = matches, otm_splines = otms_splines,                                              doy = 237, mod = seq(0,1440, by = 60)) ## [1] \"0.19 % of predictions were removed due to falling outside of the time when OTMs were recording\" prediction_237 ## # A tibble: 152,834 × 5 ##    latitude longitude   doy   mod pred_op_temp ##       <dbl>     <dbl> <dbl> <dbl>        <dbl> ##  1     39.9     -120.   237  1380         23.0 ##  2     39.9     -120.   237  1320         22.8 ##  3     39.9     -120.   237   900         36.0 ##  4     39.9     -120.   237  1080         32.1 ##  5     39.9     -120.   237  1200         25.9 ##  6     39.9     -120.   237  1440         22.0 ##  7     39.9     -120.   237    60         21.3 ##  8     39.9     -120.   237     0         21.5 ##  9     39.9     -120.   237  1260         24.9 ## 10     39.9     -120.   237   660         34.6 ## # ℹ 152,824 more rows prediction_237 %>%    filter(!is.na(mod)) %>%   ggplot(aes(x = longitude, y = latitude, fill = pred_op_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_wrap(~mod/60) +   theme_minimal() +   theme(axis.text = element_blank(), axis.title = element_blank(),         legend.position = \"top\",strip.text = element_text(size = 12)) +   guides(fill = guide_colorbar(title = \"Predicted Operative Temperature (C)\"))"},{"path":"https://ggcostoya.github.io/throne/articles/predicting_thermal_landscapes.html","id":"predictive-accuracy","dir":"Articles","previous_headings":"","what":"Predictive accuracy","title":"Predicting Thermal Landscapes","text":"discuss accompanying manuscript, method highly accurate predicting thermal landscapes. end, performed validation compare predicted operative temperature tiles containing OTMs using predict_thermal_landscape function operative temperatures recorded OTMs actually tiles. average prediction error (.e., pred_op_temp - op_temp) XX.","code":"val_data %>%    filter(knot_p == 1/7.5, n_flights == 34, n_otms == 33) %>%    ggplot(aes(x = pred_op_temp - obs_op_temp)) +    geom_histogram(aes(y = ..density..), fill = \"lightgray\") +   geom_density() +   xlab(\"Prediction error (Predicted - Observed Operative Temp., C)\") +   ylab(\"Density\") +   theme_minimal() ## Warning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0. ## ℹ Please use `after_stat(density)` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flights_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Reading and processing flights data","text":"goal vignette illustrate process behind rnp_flights_data (read process flights data) function throne package. function enables processing raw .tif files obtained combining images gathered flight data structure easily manageable R (tibble). tibble later related operative temperature model (OTM) data finally predict thermal landscapes. , highlight section package’s workflow covered vignette:  Next, present rnp_flights_data function works, notes choice parameter digits worked-example use function.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flights_data.html","id":"how-the-rnp_flights_data-function-works","dir":"Articles","previous_headings":"","what":"How the rnp_flights_data function works","title":"Reading and processing flights data","text":"rnp_flight_data function uses functionality developed package raster transform .tif file tibble (similar data.frame R). detail functions inputs, processing output. rnp_flights_data takes 3 inputs: path directory .tif files flights stored. function process .tif files stored folder. many /file considerable size, take substantial amount time run. Luckily, need ran ! tibble data.frame metadata flight. metadata tibble must contain columns flight_id, date flight took place (MM/DD/YYYY format), time day flight started ended (time_start & time_end columns HH:MM format). example metadata tibble include part documentation throne package: number decimal digits final output summarized . Specifying parameter correctly essential dictate spatial resolution tiles eventual thermal landscape. Since believe absolutely critical issue, include section discussing choice section @ref(digits) . transform original .tif files, rnp_flights_data function goes following general steps: Read specified .tif file raster object using raster function raster package. Re-project coordinates raster Universal Transverse Mercator(UTM) coordinate system easy interpret World Geodetic System(WGS84) coordinate system (.e., system based UTM zones widely used decimal latitude longitude degrees), using projectRaster function also raster package. Transform raster data.frame via rasterToPoints function raster package. resulting data.frame columns longitude, latitude IR temperature (.e., temperature measured drone) many rows combinations unique longitude latitude values initial .tif file . combination corresponds “tile” within area study area “tile” determined number decimal digits latitude longitude measurements highlighted earlier. Round number decimal digits latitude longitude observations according digits argument. Average IR temperature across observations averaged latitude longitude. Add metadata corresponding flight final output. Simultaneously, date, time_start time_end columns metadata file transformed columns year, day year (doy), minute day (mod) flight started (mod_start) ended (mod_end). NOTE: choose working doy mod simplify management data much possible. Date time data unique data formats R environment often difficult handle users might lead unintended errors. using doy mod, user deals integer columns, much easier operate manipulate. , formats can easily transformed back easily interpretable scales visualization purposes, using .Date function transform doy (also known Julian date) back YYYY-MM-DD format dividing 60 mod get hours. final output tibble object columns longitude, latitude IR-measured temperature (ir_temp). number rows data set vary depending number flights processed simultaneously, based area covered eacg flight number digits specified. instance, study area ~ 2900 \\(m^2\\), processed setting digits = 5 led tibble ~7500 observations per flight representing “tile” approximately 0.4 \\(m^2\\) latitude approximately 40° (See details choice digits argument section @ref(digits)). raw .tif file processed, resulting tibble can already used quantify thermal characteristics study site spatially discrete perspective. illustrate , plot 4 34 fully processed flights (digits = 5) area offer throne package example data. Panel titles indicate hour flight took place","code":"## # A tibble: 34 × 4 ##    flight_id date      time_start time_end ##    <chr>     <chr>     <chr>      <chr>    ##  1 flight01  8/24/2023 8:35       8:39     ##  2 flight02  8/24/2023 8:59       9:03     ##  3 flight03  8/24/2023 9:19       9:23     ##  4 flight04  8/24/2023 9:42       9:46     ##  5 flight05  8/24/2023 10:06      10:10    ##  6 flight06  8/24/2023 10:38      10:42    ##  7 flight07  8/24/2023 10:57      11:01    ##  8 flight08  8/24/2023 11:20      11:24    ##  9 flight09  8/24/2023 11:40      11:44    ## 10 flight10  8/24/2023 12:00      12:04    ## # ℹ 24 more rows ## # A tibble: 263,008 × 7 ##    longitude latitude ir_temp  year   doy mod_start mod_end ##        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> ##  1     -120.     39.9    12.5  2023   236       515     519 ##  2     -120.     39.9    14.4  2023   236       515     519 ##  3     -120.     39.9    14.0  2023   236       515     519 ##  4     -120.     39.9    13.7  2023   236       515     519 ##  5     -120.     39.9    14.6  2023   236       515     519 ##  6     -120.     39.9    15.3  2023   236       515     519 ##  7     -120.     39.9    14.5  2023   236       515     519 ##  8     -120.     39.9    14.5  2023   236       515     519 ##  9     -120.     39.9    13.9  2023   236       515     519 ## 10     -120.     39.9    13.9  2023   236       515     519 ## # ℹ 262,998 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flights_data.html","id":"digits","dir":"Articles","previous_headings":"","what":"Choosing the appropriate digits.","title":"Reading and processing flights data","text":"argument digits determines number decimal digit places latitude longitude information rounded . argument therefore determine spatial resolution final measurement different latitude longitude decimal digits correspond different distances. generalization, 1 degree latitude can approximated 111.32 km, relationship can extended decimal digits seen .  contrast, due curvature Earth distance represented longitude degree also dependent latitude. can find information transform degrees longitude distances . Furthermore, proxistat Rpackage provides helpful functions transform coordinate systems measurable distances. use proxistat functions illustrate latitude influences distance represented longitudinal degree.  Based , majority cases, recommend setting argument digits = 5. provide spatial resolution ~ 1.2 \\(m^2\\) equator gradually descend little ~ 0.5 \\(m^2\\) 66° Latitude seen .  spatial resolution guarantees original .tif file processed scale relevant majority study organisms package intended. However, leave decision user consider spatial scale relevant organism. image (figure S1 accompanying paper), illustrate flight processed argument digits set 4, 5 6 respectively.","code":"## Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2 ## 3.5.0. ## ℹ Please use the `legend.position.inside` argument of `theme()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":[]},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otms_data_gen_otm_splines.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Reading, processing and characterizing OTM data","text":"goal vignette illustrate process behind rnp_otms_data (read process OTMs data) gen_otm_splines (generate OTM spline models) function throne package. first function allows user read one multiple raw .csv temperature measurements recorded iButton logger inside () operative temperature model (OTM) data structure easily manageable R (tibble). second function takes processed OTM data generates OTM & day year (doy) specific cubic spline model describes thermal dynamics unique OTM day. spline models later used correct flight data ultimately predict thermal landscapes. , highlight section package’s workflow covered vignette:  Next, ","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otms_data_gen_otm_splines.html","id":"how-the-rnp_otms_data-function-works","dir":"Articles","previous_headings":"","what":"How the rnp_otms_data function works","title":"Reading, processing and characterizing OTM data","text":"rnp_otms_data function reads database .csv files, reads , manipulates ultimately combines large tibble. , function takes following inputs: path, directory one multiple .csv files stored. .csv files assumed least: column operative temperature measurements. Since different iButton processing softwares structure outputs differently resulting .csv file, require user specify column OTM measurements can found op_temp_col argument function. case, used OneWire Viewer returns operative temperature 3rd column. column dates. operative temperature values, also require user specify date_col .csv files. OneWireViewer returns date first column MM/DD/YY HH:MM:SS /PM format. default dates times extracted column software return date time separate columns. case, user can specify time_col argument function. OTM metadata tibble containing information related specific OTM (identified unique otm_id). user can include metadata OTM require otm_id column present strongly recommend metadata tibble file also contains columns latitude longitude OTM deployed. example metadata tibble can found package also incorporate information microhabitat, orientation elevation OTM deployed. TIP: recommend users throne package become familiar formatting .csv contain OTM data. software options resulting .csv file contain several rows metadata might lead incorrect reading file (see example ). rnp_otms_data provide warnings also recommend users specify many rows skeeped reading .csv file via rows_skip. Specifying rows_skip argument correctly crucial rest package’s functions work properly line. transform raw .csv data R tibble, rnp_otm_data function go following general steps: Read .csv file skipping many rows specified within rows_skip argument. Select columns time operative temperature specified date_col (time_col) op_temp_col arguments. Using tools lubridate package, extract year, day year (doy) minute day (doy) oprative temperature measurement (op_temp) made. NOTE: choose working doy mod simplify management data much possible. Date time data unique data formats R environment often difficult handle users might lead unintended errors. using doy mod, user deals integer columns, much easier operate manipulate. , formats can easily transformed back easily interpretable scales visualization purposes, using .Date function transform doy (also known Julian date) back YYYY-MM-DD format dividing 60 mod get hours. Merge processed data OTM corresponding metadata , one file specified, bind outputs together. final output tibble object look like : row tibble correspond unique operative temperature (op_temp) measurement given otm_id given year, doy mod. example data set contains measurements 33 OTMs 4 days recording rate 720 observations / day (30 observations / h, 0.5 observations / min).","code":"##            Date.Time Unit Value ## 1 8/24/23 6:04:00 AM    C    14 ## 2 8/24/23 6:06:00 AM    C    14 ## 3 8/24/23 6:08:00 AM    C    14 ## 4 8/24/23 6:10:00 AM    C    14 ## 5 8/24/23 6:12:00 AM    C    14 ## 6 8/24/23 6:14:00 AM    C    14 otms_metadata ## # A tibble: 36 × 6 ##    otm_id microhabitat orientation latitude longitude elevation ##    <chr>  <chr>        <chr>          <dbl>     <dbl>     <dbl> ##  1 OTM01  outcrop      N               39.9     -120.     1312. ##  2 OTM21  outcrop      NW              39.9     -120.     1312. ##  3 OTM07  outcrop      E               39.9     -120.     1312. ##  4 OTM16  outcrop      SE              39.9     -120.     1313. ##  5 OTM17  outcrop      Flat            39.9     -120.     1311. ##  6 OTM28  rock         Flat            39.9     -120.     1313. ##  7 OTM13  rock         S               39.9     -120.     1314. ##  8 OTM37  boulder      W               39.9     -120.     1314. ##  9 OTM33  boulder      Flat            39.9     -120.     1314. ## 10 OTM24  rock         E               39.9     -120.     1314. ## # ℹ 26 more rows ##                X1.Wire.iButton.Part.Number..DS1921G.F5 ## 1 1-Wire/iButton Registration Number: 3300000059DFE621 ## 2                             Is Mission Active?  true ## 3         Mission Start:  Thu Aug 24 06:04:00 PDT 2023 ## 4                      Sample Rate:  Every 2 minute(s) ## 5                    Number of Mission Samples:  18947 ## 6                                Total Samples:  89897 ## # A tibble: 67,584 × 10 ##    otm_id  year   doy   mod op_temp microhabitat orientation latitude longitude ##    <chr>  <dbl> <dbl> <dbl>   <dbl> <chr>        <chr>          <dbl>     <dbl> ##  1 OTM01   2023   236   367    13.5 outcrop      N               39.9     -120. ##  2 OTM01   2023   236   369    13.5 outcrop      N               39.9     -120. ##  3 OTM01   2023   236   371    13.5 outcrop      N               39.9     -120. ##  4 OTM01   2023   236   373    13.5 outcrop      N               39.9     -120. ##  5 OTM01   2023   236   375    13.5 outcrop      N               39.9     -120. ##  6 OTM01   2023   236   377    13.5 outcrop      N               39.9     -120. ##  7 OTM01   2023   236   379    13.5 outcrop      N               39.9     -120. ##  8 OTM01   2023   236   381    13.5 outcrop      N               39.9     -120. ##  9 OTM01   2023   236   383    13.5 outcrop      N               39.9     -120. ## 10 OTM01   2023   236   385    13.5 outcrop      N               39.9     -120. ## # ℹ 67,574 more rows ## # ℹ 1 more variable: elevation <dbl>"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otms_data_gen_otm_splines.html","id":"generating-otm-spline-models","dir":"Articles","previous_headings":"","what":"Generating OTM spline models","title":"Reading, processing and characterizing OTM data","text":"OTM data read processed, next step fit cubic smoothing spline model individual OTM doy ’s deployment field. spline model capture thermal dynamics OTM throughout given doy allowing us build predict operative temperature experienced OTM moment doy based measurements recorded. fit models throne package includes gen_otm_splines function takes input data generated via previously presented rnp_otms_data function function return “complex” tibble include OTM identification (otm_id) associated metadata, together nested column containing spline model generated via native R function smooth.spline. call “complex” tibble precisely nesting splines column. resulting splines tibble contain many rows combinations unique otm_id doy since spline model OTM every day deployed field:","code":"## # A tibble: 132 × 9 ##    otm_id  year   doy microhabitat orientation latitude longitude elevation ##    <chr>  <dbl> <dbl> <chr>        <chr>          <dbl>     <dbl>     <dbl> ##  1 OTM01   2023   236 outcrop      N               39.9     -120.     1312. ##  2 OTM01   2023   237 outcrop      N               39.9     -120.     1312. ##  3 OTM01   2023   238 outcrop      N               39.9     -120.     1312. ##  4 OTM01   2023   239 outcrop      N               39.9     -120.     1312. ##  5 OTM02   2023   236 outcrop      W               39.9     -120.     1313. ##  6 OTM02   2023   237 outcrop      W               39.9     -120.     1313. ##  7 OTM02   2023   238 outcrop      W               39.9     -120.     1313. ##  8 OTM02   2023   239 outcrop      W               39.9     -120.     1313. ##  9 OTM03   2023   236 rock         W               39.9     -120.     1317. ## 10 OTM03   2023   237 rock         W               39.9     -120.     1317. ## # ℹ 122 more rows ## # ℹ 1 more variable: spline <list>"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otms_data_gen_otm_splines.html","id":"choosing-the-appropriate-knot_p-value-","dir":"Articles","previous_headings":"","what":"Choosing the appropriate knot_p value.","title":"Reading, processing and characterizing OTM data","text":"critical point gen_otm_splines function work correctly determining appropriate value knot_p argument. argument determines percentage observations recorded OTM given day used determine number knots smoothing spline model. put simply, number knots ultimately determine degrees freedom model \\(df = degree + k\\) \\(degree = 3\\) cubic splines. (see details). number degrees freedom determine “wiggliness” resulting model, words, number times resulting curve change direction. example, plot different spline models data using different knot_p parameter specifications.  decision knot_p value use dependent two things. First frequency OTM recording. can extrapolate many knots/day (knots/h) get based frequency recordings knot_p value according formula: \\[ Knot/h = Recordings/h \\cdot knot_p\\] instance, OTMs used programmed record temperature measurement every 2 minutes, leading total 30 observations / hour. Assuming knot_p = 0.1 indicate model 3 knots / h. second issue determines value knot_p study organism user R package. Generally OTMs equilibrate environmental temperature much faster organism represent difference equilibration time positively correlated mass organism due thermal inertia. words, body temperature organism lot thermal inertia exactly OTM. (Need work )","code":""},{"path":"https://ggcostoya.github.io/throne/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"package maintainer. Maintainer.","code":""},{"path":"https://ggcostoya.github.io/throne/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Ww (2024). throne: Thermal drone - OTM integration. R package version 0.1.0, https://ggcostoya.github.io/throne/.","code":"@Manual{,   title = {throne: Thermal drone - OTM integration},   author = {Who wrote it},   year = {2024},   note = {R package version 0.1.0},   url = {https://ggcostoya.github.io/throne/}, }"},{"path":[]},{"path":"https://ggcostoya.github.io/throne/reference/correct_flights_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct flights data — correct_flights_data","title":"Correct flights data — correct_flights_data","text":"Correct flights data transform IR-measured temperatures operative temperatures","code":""},{"path":"https://ggcostoya.github.io/throne/reference/correct_flights_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct flights data — correct_flights_data","text":"","code":"correct_flights_data(flights_data, otm_splines)"},{"path":"https://ggcostoya.github.io/throne/reference/correct_flights_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct flights data — correct_flights_data","text":"flights_data `tibble` flights data obtained `rnp_flights_data` function. `tibble` must contain columns `longitude` `latitude`. otm_splines complex `tibble` obtained using `gen_otm_splines` function. `tibble` must contain columns `longitude` `latitude` values must also `flights_data`","code":""},{"path":"https://ggcostoya.github.io/throne/reference/correct_flights_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct flights data — correct_flights_data","text":"processed `flights_data` `tibble` IR-measured temperatures (`ir_temp`)    corrected operative temperatures (`op_temp`).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate OTM splines — gen_otm_splines","title":"Generate OTM splines — gen_otm_splines","text":"Generate unique spline model OTM date (Julian) OTM measuring","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate OTM splines — gen_otm_splines","text":"","code":"gen_otm_splines(otm_data, knot_p)"},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate OTM splines — gen_otm_splines","text":"otm_data OTM data `tibble` obtained via function `rnp_otms_data`. must include columns describing OTM id (`otm_id`), day year (`doy`), minute day (`mod`) operative temperature measurement (`op_temp`) made. function can run without `latitude` `longitude` columns, including necessary `correct_flight_data`, `match_data` `predict_thermal_landscape` functions. knot_p number knots spline model describe temperature dynamics OTM given day taken percentage total number operative measurements given day.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate OTM splines — gen_otm_splines","text":"complex `tibble` columns `otm_id`, `year`, `doy` `spline`.    spline column nested contains OTM, year DOY `smooth.spline` model    specified number knots.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate OTM splines — gen_otm_splines","text":"","code":"# filter data for a specific OTM in a given doy otm <- otms_data %>% filter(otm_id == \"OTM12\", doy == 237)  # generate the spline model otm_spline <- gen_otm_splines(otm_data = otm, knot_p = 1/7.5)  # obtain a prediction pred <- tibble(mod = seq(0,1440,by = 1), op_temp = predict(otm_spline$spline[[1]], seq(0,1440,by = 1))$y)  # plotting ggplot() +   geom_point(data = otm, aes(x = mod, y = op_temp), size = 4, alpha = 0.1) +   geom_line(data = pred, aes(x = mod, y = op_temp), linewidth = 2, col = \"red\") +   xlab(\"Minute of the day (MOD)\") + ylab(\"Operative Temperature (C)\")"},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Match flights to OTM data — match_data","title":"Match flights to OTM data — match_data","text":"Matches thermal dynamics specific tiles (.e., specific latitude longitudes) collected across multiple flights thermal dynamics operative temperature model (OTM).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match flights to OTM data — match_data","text":"","code":"match_data(flights_data, otm_splines, coverage_per, error_max)"},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match flights to OTM data — match_data","text":"flights_data `tibble` flights data obtained `rnp_flights_data` corrected using `correct_flights_data` function. temperature column `op_temp` function also work `ir_temp` provided. otm_splines complex `tibble` obtained using `gen_otm_splines` function. coverage_per numeric 0 - 1 indicating minimum coverage tile across flights provided order included matching. Coverage calculated number times temperature measured given tile divided total number flights. Values >= 0.9 recommended. function provide warning number tiles coverage > 0.5. error_max maximum average absolute error temperature measurements tile OTM makes match tile OTM valid. Error calculated average absolute value OTM prediction temperature measurements tile.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match flights to OTM data — match_data","text":"matches `tibble` columns `latitude`, `longitude`, `otm_id`    best describes thermal dynamics tile average absolute    `error` tile measurements OTM predictions. Rows `.na(otm_id)`    indicate tiles `error` `< error_max` OTMs provided.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict thermal landscape — predict_thermal_landscape","title":"Predict thermal landscape — predict_thermal_landscape","text":"Predict thermal landscape","code":""},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict thermal landscape — predict_thermal_landscape","text":"","code":"predict_thermal_landscape(matches, otm_splines, doy, mod)"},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict thermal landscape — predict_thermal_landscape","text":"matches matches `tibble` obtained using `match_data` function. otm_splines complex `tibble` obtained using `gen_otm_splines` function. doy integer vector integers indicating day(s) year (DOY) thermal landscape predicted. elements within `doy` must within range OTMs started finished recording operative temperatures. mod integer vector integers indicating minute(s) day (MOD) thermal landscape predicted. elements within `mod` must fall within 0 1440 range. `mod` includes values OTMs recording return `NA` provide diagnostics message","code":""},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict thermal landscape — predict_thermal_landscape","text":"`tibble` predicted thermal landscape `longitude`, `latitude`,    `doy`, `mod` predicted operative temperature columns (`pred_op_temp`).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flights_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process flights data — rnp_flights_data","title":"Read and process flights data — rnp_flights_data","text":"Reads processes data multiple flights `.tif` format adds metadata","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flights_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process flights data — rnp_flights_data","text":"","code":"rnp_flights_data(path, metadata, digits)"},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flights_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process flights data — rnp_flights_data","text":"path character indicating directory `.tif` files flights stored. name flight `.tif` file must associated metadata function work. metadata metadata `tibble` flights information `flight_id` (character), `date` (MM/DD/YYYY), `time_start`(HH:MM) `time_end`(HH:MM) flight. digits integer (>0 & <6), indicating number decimal digit places final output summarized . dictate spatial resolution tiles eventual thermal landscape.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flights_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process flights data — rnp_flights_data","text":"`tibble` row represents unique tile (unique combination    `longitude` `latitude`), associated IR temperature measurement    (`ir_temp`) unique flight. identify flight, row    return `tibble` also contains information `year`, date year (`doy`)    minute da (MOD) flight started (`mod_start`) ended (`mod_end`)","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otms_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process OTM data — rnp_otms_data","title":"Read and process OTM data — rnp_otms_data","text":"Read processes data multiple operative temperature model (OTM) `.csv` files adds metadata","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otms_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process OTM data — rnp_otms_data","text":"","code":"rnp_otms_data(path, rows_skip, date_col, time_col, op_temp_col, metadata)"},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otms_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process OTM data — rnp_otms_data","text":"path character specifying either path single folder multiple OTM files `.csv` format. file needs least column information moment (.e., date time day) measurement made column operative temperature value measurement rows_skip positive integer indicating rows skip reading OTM `.csv` files. omitted, defaults `0`. date_col positive integer indicating column OTM `.csv` file contains date measurement. Dates need either MM/DD/YYYY HH:MM:SS, MM/DD/YYYY HH:MM MM/DD/YYYY. time_col positive integer indicating column OTM `.csv` file contains time measurement. Times need HH:MM:SS HH:MM format. specified, try extract date information `date_col`. op_temp_col positive integer indicating column column OTM `.csv` file contains operative temperature measurement metadata `tibble` `data.frame` containing metadata related OTM. needs `otm_id` character column matching names OTM files.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otms_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process OTM data — rnp_otms_data","text":"`tibble` row represents unique operative temperature    measurement (`op_temp`) taken given OTM (specified `otm_id`),    occurred given `year`, date year (`doy`) minute    day (`mod`). `tibble` many additional columns    metadata characteristics included `metadata`.","code":""}]

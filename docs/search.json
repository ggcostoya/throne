[{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Case study: Thermoregulation in high elevation lizards.","text":"vignette illustrate case study serve example use tools provided throne package. example looking population western fence lizards (Sceloporus occidentalis) living ~ 2400 m sea level Great Basin Desert Northern Nevada.  population underwent mark-recapture summer 2022. individuals uniquely identified via toe-clipping , upon capture recorded location individual (.e., latitude longitude) using Trimble Geo7x GPS accuracy ~0.5 \\(m^2\\), time (.e., year, day year doy minute day mod). Additionally, lizards recorded body temperature measurement (tb) inserting thermocouple probe animal’s cloaca: data goal : Quantify distribution temperatures experienced lizards. Assess relationship tb temperatures available gauge ability behaviorally thermoregulate environment. achieve goals can use methodology developed throne package detail :","code":"lizard_mr ## # A tibble: 170 × 8 ##    id    sex    year   doy   mod latitude longitude    tb ##    <chr> <chr> <int> <dbl> <dbl>    <dbl>     <dbl> <dbl> ##  1 H001  F      2022   173   583     39.7     -119.  30.5 ##  2 H004  M      2022   173   657     39.7     -119.  34.8 ##  3 H005  M      2022   173   678     39.7     -119.  33.5 ##  4 H006  F      2022   173   702     39.7     -119.  35.3 ##  5 H007  M      2022   173   723     39.7     -119.  33.2 ##  6 H008  F      2022   173   724     39.7     -119.  32.2 ##  7 H009  M      2022   173   753     39.7     -119.  33.6 ##  8 H010  F      2022   173   795     39.7     -119.  31.9 ##  9 H014  M      2022   173   922     39.7     -119.  NA   ## 10 H015  M      2022   173   941     39.7     -119.  NA   ## # ℹ 160 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"otm-deployement","dir":"Articles","previous_headings":"","what":"OTM deployement","title":"Case study: Thermoregulation in high elevation lizards.","text":"deployed total 128 operative temperature models (OTMs) randomly site recorded 1 operative temperature measurement per hour.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"flights","dir":"Articles","previous_headings":"","what":"Flights","title":"Case study: Thermoregulation in high elevation lizards.","text":"flew 3 flights ~ 95000 \\(m^2\\) area overlapping areas surveyed part lizard mark-recapture. Two flightswere conducted day (08/04/2022) 07:55 11:21 third flight conducted 2 days later 16:05","code":"c_flights_metadata ##    flight_id     date time_start time_end ## 1 c_flight_1 8/6/2022      16:05    16:28 ## 2 c_flight_2 8/4/2022      11:21    11:45 ## 3 c_flight_3 8/4/2022       7:55     8:19"},{"path":[]},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"reading-and-processing-flights-data","dir":"Articles","previous_headings":"R workflow","what":"Reading and processing flights data","title":"Case study: Thermoregulation in high elevation lizards.","text":"Following R workflow specified throne package, first step read process flights data. important part step specify digits argument set spatial resolution tiles final thermal landscape prediction. example, choose set digits = 5 , latitude, lead tile area ~ 0.95 \\(m^2\\), representative micro habitat lizard might experiencing. read process flights data using rnp_flights_data function follows: outcome flights data tibble storing surface temperature (ir_temp) measurements collected across flights: can plot data using ggplot tools already get sense thermal characteristics site:","code":"# set files path flight_files_path <- \"x\" # This would be a folder within the user's computer, not specified here  # read the metadata file  c_flights_metadata <- read.csv(\"data/case_flight_data.csv\")  # read and process flights data c_flights_data <- rnp_flights_data(path = flight_files_path, metadata = c_flights_metadata, digits = 5) c_flights_data ## # A tibble: 304,368 × 7 ##    longitude latitude ir_temp  year   doy mod_start mod_end ##        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> ##  1     -119.     39.7    17.8  2022   218       965     988 ##  2     -119.     39.7    18.2  2022   218       965     988 ##  3     -119.     39.7    13.5  2022   218       965     988 ##  4     -119.     39.7    26.8  2022   218       965     988 ##  5     -119.     39.7    24.5  2022   218       965     988 ##  6     -119.     39.7    18.0  2022   218       965     988 ##  7     -119.     39.7    27.3  2022   218       965     988 ##  8     -119.     39.7    27.2  2022   218       965     988 ##  9     -119.     39.7    22.1  2022   218       965     988 ## 10     -119.     39.7    22.7  2022   218       965     988 ## # ℹ 304,358 more rows c_flights_data %>%    ggplot(aes(x = longitude, y = latitude, fill = ir_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(mod_start))"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"reading-and-processing-otms-data","dir":"Articles","previous_headings":"R workflow","what":"Reading and processing OTMs data","title":"Case study: Thermoregulation in high elevation lizards.","text":"next step read process data collected via OTMs. can using rnp_otms_data function throne package. , check structure raw OTM .csv files. example look like : taking look (files) can tell need skip rows reading .csv means can set rows_skip argument rnp_otms_data 1, can start reading first row. can also see column raw_data_time contains information date time measurement thus, set date_col argument 1. also specify time_col = 1, ’s necessary time_col specified, rnp_flights_data assume date_col = time_col. Lastly, can see file operative temperature measurements stored third column , result, set op_temp_col argument 2. mind, can read process OTM data follows: outcome otm data tibble containing observations made OTMs: seen , OTMs fell within area covered flights. presenting subset flights collected lizard observations. Nonetheless, fact thermal dynamics given OTM (position) characteristic use predict thermal landscapes, can use OTMs fell outside area interest long recording time flights took place:","code":"##     raw_date_time temp otm ## 1 6/13/2022 14:18 27.0 H22 ## 2 6/13/2022 15:18 18.0 H22 ## 3 6/13/2022 16:18 21.5 H22 ## 4 6/13/2022 17:18 16.0 H22 ## 5 6/13/2022 18:18 10.0 H22 ## 6 6/13/2022 19:18  8.0 H22 # speficy the path to where the OTM .csv files are stored c_otms_path <- \"data/case_otm_data\"  # specify the OTM metadata file  c_otms_metadata <- read.csv(\"data/case_otm_metadata.csv\")  # read and process OTMs data c_otms_data <- rnp_otms_data(path = c_otms_path, metadata = c_otms_metadata, rows_skip = 1, date_col = 1, op_temp_col = 2) as_tibble(c_otms_data) ## # A tibble: 262,016 × 7 ##    otm_id  year   doy   mod op_temp latitude longitude ##    <chr>  <dbl> <dbl> <dbl>   <dbl>    <dbl>     <dbl> ##  1 H1      2022   164   910    15       39.7     -119. ##  2 H1      2022   164   970    17       39.7     -119. ##  3 H1      2022   164  1030    16       39.7     -119. ##  4 H1      2022   164  1090    15.5     39.7     -119. ##  5 H1      2022   164  1150    13       39.7     -119. ##  6 H1      2022   164  1210     9       39.7     -119. ##  7 H1      2022   164  1270     4       39.7     -119. ##  8 H1      2022   164  1330     2.5     39.7     -119. ##  9 H1      2022   164  1390     2       39.7     -119. ## 10 H1      2022   165    10     1       39.7     -119. ## # ℹ 262,006 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"building-otm-spline-models","dir":"Articles","previous_headings":"R workflow","what":"Building OTM spline models","title":"Case study: Thermoregulation in high elevation lizards.","text":"read OTMs data, next step define cubic splines models describe thermal dynamics OTM doy deployment. , can use gen_otm_splines function throne package. step, crucial user input knot_p parameter determine “wiggliness” spline model. Choosing th appropriate knot_p value dependent recording frequency set OTMs thermal properties organism interest . Based thermal properties organism interest (Sceloporus occidentalis), ideally spline model 1 knot every 15 minutes OTMs recorded afrequency 1 observation / hour. frequency, want preserve much information thermal fluctuations OTM possible setting knot_p = 1 works fine. obtain spline models, can simply run: returns nested tibble otm_id & doy specific models (column spline):","code":"c_otms_splines <- gen_otm_splines(otm_data = c_otms_data, knot_p = 1) c_otms_splines ## # A tibble: 11,008 × 6 ##    otm_id  year   doy latitude longitude spline     ##    <chr>  <dbl> <dbl>    <dbl>     <dbl> <list>     ##  1 H1      2022   164     39.7     -119. <smth.spl> ##  2 H1      2022   165     39.7     -119. <smth.spl> ##  3 H1      2022   166     39.7     -119. <smth.spl> ##  4 H1      2022   167     39.7     -119. <smth.spl> ##  5 H1      2022   168     39.7     -119. <smth.spl> ##  6 H1      2022   169     39.7     -119. <smth.spl> ##  7 H1      2022   170     39.7     -119. <smth.spl> ##  8 H1      2022   171     39.7     -119. <smth.spl> ##  9 H1      2022   172     39.7     -119. <smth.spl> ## 10 H1      2022   173     39.7     -119. <smth.spl> ## # ℹ 10,998 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"correcting-flights-data","dir":"Articles","previous_headings":"R workflow","what":"Correcting flights data","title":"Case study: Thermoregulation in high elevation lizards.","text":"Due inherent differences physical properties surface temperature measurements IR camera operative temperature measurements OTM, next step throne package workflow correct data obtained via flights using OTM flights data. achieve , use correct_flighs_data function follows: can visualize effects correction process (Post-correction) respect data original flights (Pre-correction).","code":"c_flights_data_corr <- correct_flights_data(flights-data = c_flights_data, otm_splines = c_otms_splines) pre_corr <- c_flights_data %>%    ggplot(aes(x = longitude, y = latitude, fill = ir_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(mod_start)) +   ggtitle(\"Pre-correction\")   post_corr <- c_flights_data_corr %>%    ggplot(aes(x = longitude, y = latitude, fill = op_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(mod_start)) +   ggtitle(\"Post-correction\")     grid.arrange(pre_corr, post_corr, nrow = 2, ncol = 1)"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"matching-tiles-to-otm-dynamics","dir":"Articles","previous_headings":"R workflow","what":"Matching tiles to OTM dynamics","title":"Case study: Thermoregulation in high elevation lizards.","text":"last step able predict thermal landscapes match thermal dynamics tiles within corrected flights data dynamics given OTM. achieve , can use match_data function throne package. use function, two user-specific inputs needed: coverage_per error_max. first one determines degree coverage across multiple flights tile needs order considered matching process. seen , flights particularly good overlap:  case, can set coverage_per = 1 ensure areas covered across flights considered although, greater number flights recommend setting coverage_per = 0.9. second input (error_max) determines maximum average absolute error tile OTM dynamics specified threshold matching. average absolute difference tile’s thermal dynamics OTM best describes > error_max, tile matched OTM thus considered. case, follow specifications set error_max = 5. Now, can run match_data function follows: result matches tibble OTM best describes dynamics tile site. figure , tile colored according otm_id best represents ’s thermal dynamics.","code":"c_flights_data_corr %>%    group_by(latitude, longitude) %>%    summarise(coverage_per = 100*(n()/3)) %>%    ggplot(aes(x = longitude, y = latitude)) +   geom_raster(aes(fill = coverage_per)) +   guides(fill = guide_colorbar(title = \"Coverage (%)\")) c_matches <- match_data(flights_data = c_flights_data_corr, otm_splines = c_otms_splines, coverage_per = 1, error_max = 5) c_matches ## # A tibble: 98,363 × 4 ##    latitude longitude otm_id  error ##       <dbl>     <dbl> <chr>   <dbl> ##  1     39.7     -119. NA     NA     ##  2     39.7     -119. H121    0.842 ##  3     39.7     -119. H6      2.17  ##  4     39.7     -119. H16     3.06  ##  5     39.7     -119. H4      1.39  ##  6     39.7     -119. H56     2.44  ##  7     39.7     -119. H78     2.15  ##  8     39.7     -119. H132    2.89  ##  9     39.7     -119. H36     1.86  ## 10     39.7     -119. H6      1.32  ## # ℹ 98,353 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"predicting-thermal-landscapes","dir":"Articles","previous_headings":"","what":"Predicting thermal landscapes","title":"Case study: Thermoregulation in high elevation lizards.","text":"Making use , can finally predict thermal landscapes site using predict_thermal_landscape function throne package. example, ’ll predict thermal landscape every hour 6 (mod = 360) 9 PM (mod = 1260) June 29th (doy = 180). obtain prediction ’d simply run: resulting prediction tibble contains 1.5 million observations: can easily plotted follows: visualized dynamic landscape every hour day using tools gganimate package:","code":"ex_pred <- predict_thermal_landscape(matches = c_matches, otm_splines = c_otms_splines, doy = 180, mod = seq(360,1260,by = 60)) ## [1] \"0.01 % of predictions were removed due to falling outside of the time when OTMs were recording\" ex_pred ## # A tibble: 1,571,363 × 5 ##    latitude longitude   doy   mod pred_op_temp ##       <dbl>     <dbl> <dbl> <dbl>        <dbl> ##  1     39.7     -119.   180  1200         20.3 ##  2     39.7     -119.   180   660         25.0 ##  3     39.7     -119.   180   960         32.6 ##  4     39.7     -119.   180   360         10.5 ##  5     39.7     -119.   180   480         12.8 ##  6     39.7     -119.   180  1020         30.5 ##  7     39.7     -119.   180  1140         24.3 ##  8     39.7     -119.   180   600         21.1 ##  9     39.7     -119.   180  1080         27.7 ## 10     39.7     -119.   180   840         32.8 ## # ℹ 1,571,353 more rows ex_pred %>%    filter(!is.na(mod)) %>%   ggplot(aes(x = longitude, y = latitude, fill = pred_op_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_wrap(~mod/60) +   theme(axis.text = element_blank(), axis.title = element_blank())"},{"path":"https://ggcostoya.github.io/throne/articles/case_study.html","id":"effectiveness-of-thermoregulatory-behavior-","dir":"Articles","previous_headings":"","what":"Effectiveness of thermoregulatory behavior.","title":"Case study: Thermoregulation in high elevation lizards.","text":"body temperatures compare distribution temperatures available site:  High thermoregulatory accuracy around 33.3. distributed time space relationship suitability habitat: work needed !","code":"# get sequence of all doy with lizards present  doys <- unique(lizard_mr$doy)  # predict full landscape c_full_landscape <- predict_thermal_landscape(matches = c_matches, otm_splines = c_otms_splines,                                             doy = doys, mod = seq(7*60, 20*60, by = 60))  ## NOT RAN HERE TO SAVE COMPUTATION TIME, DATASET INCLUDED in `throne`."},{"path":"https://ggcostoya.github.io/throne/articles/collect_n_process_thermal_images.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Collect and process thermal images","text":"goal vignette illustrate first step workflow presented throne package acquisition thermal photogrammetry data. , need 1) acquire drone mounted IR thermal imaging camera, 2) fly drone collect thermal images, 3) process thermal images using photogrammetry software obtain thermal orthomosaic flight (.e., .tif format file). provide instructions perform steps include links recommended drones, software tutorials complement . Figure 1. Part workflow covered vignette","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_n_process_thermal_images.html","id":"acquiring-a-thermal-imaging-drone","dir":"Articles","previous_headings":"","what":"Acquiring a thermal imaging drone","title":"Collect and process thermal images","text":"Unmanned aerial vehicles (UAVs), colloquially known “drones”, rapidly becoming cheaper accessible use. Drones come shapes sizes, first-person view (FPV) miniature racing quadcopters, large payload-carrying hexcopters. Hobbyists can purchase fly smaller drones recreational purposes less $500 (DJI Mini SE 2 , drone used commercial (research) purposes may require higher specifications ($5000+). example, expensive drones typically come accurate -board geolocation systems (GNSS RTK modules), better -flight stabilization systems accurate photography, batteries higher capacity, obstacle detection sensors, stronger protection elements (rain, heat, dust etc.). importantly, higher-quality drones designed reliably carry expensive camera equipment, high-resolution visual (RGB) cameras topography models, near-infrared cameras mapping vegetation, infrared cameras (FLIR cameras, developed Teledyne Systems) build thermal landscape models. choosing drone equipped infrared camera (“thermal drone”), important note camera typically paired particular drone model. Different drones different gimbal (camera) mounting systems, means cameras rarely interchangeable. also important note paired thermal cameras typically expensive - expensive - drone . price thermal camera typically determined accuracy resolution (rarely exceeding 640x512 pixels - considerably lower RGB cameras). Purchasing thermal drone therefore considered investment last many years anyone interested conducting high-resolution thermal research. Currently, DJI Enterprises dominates market many drone options capable equipped thermal cameras. DJI Mavic 3T thermal variant commonly used DJI Mavic 3 drone, costs approximately $5,000. higher end spectrum, approximately $9,000, DJI also sells Matrice 30T much rugged, boasts accurate -board positioning system, equipped higher-resolution cameras, overall designed chart larger, remote areas. Finally, fairly large market used drones, can option budget concern. used DJI Matrice 200 v2 (model use, equipped Zenmuse XT2 camera), can 2024 purchased approximately $2,000. Overall, often intend use drone, environmental conditions field site key factors consider choosing buy. specifications required accurately survey study site largely depend spatial scale wish predict thermal landscape.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_n_process_thermal_images.html","id":"flying-drones-and-collecting-thermal-imagery","dir":"Articles","previous_headings":"Acquiring a thermal imaging drone","what":"Flying drones and collecting thermal imagery","title":"Collect and process thermal images","text":"acquired drone thermal camera, next step fly drone collect thermal images.Commonly, thermal imaging drones come mission (.e., flight plan) setting software. case, used DJI Pilot comes drone model, online detailed training course tutorials set flights online. Since software different, won’t provide tutorial rather give general guidelines conduct missions work optimally possible software developed throne. Naturally, flight mission details depend UAV’s camera setup, generally speaking, standard mission planning etiquette applies collecting data use within throne: Abide local laws regulations regarding flight altitude, airspace restrictions drone registration requirements. Check local authorities applies area study. example, flying U.S. airspace, adhere Code Federal Regulations (CFR) Part 107 make flights take place Class G airspace, unless given explicit permission fly elsewhere. used research purposes, drone might also need registered commercial use. default drone flight path (“zig-zag line”) generally fine purposes. recommend avoiding long, narrow flight paths minimize banding issues (differences long “strips” photos), users aim keep flight times short possible make sure images collected within relatively short span thus can capture thermal conditions. Fly weather conditions typical study system interest. recommend distributing flights across different days across different times day, maximize representation daily fluctuations temperature avoid stitching issues, recommend flying larger area area interest. important aspect consider planning flight mission also resolution mounted thermal imaging camera. Usually, thermal imaging cameras much lower resolution field view visual cameras (RGB). Therefore, make sure vertical horizontal photo overlap ratio set high (preferably 90%/90% either direction, .e., given photo’s coverage differs 10% compared previous), well maintain relatively high flight altitude (300 ft / 90 m). , course, depends spatial scale studied landscape desired resolution thereof. Regardless,strongly encourage make sure missions built around thermal camera’s field view rather visual camera - especially flying rugged terrain- otherwise risk running stitching issues processing photos, (see following sections) ’s generally good idea extend flight mission area exceed study site’s boundaries meters compensate difference. Figure 2. field view typically smaller thermal cameras compared visual cameras. overlay - perfect - aims show difference visual thermal photo taken right one another, illustrate difference area covered final important factor consider potential geolocation errors thermal images . can compensated post-processing, deploying ground control points (GCPs) one common methods can used preventative measure accurately georeference flight missions. Ground control points GPS-tagged landmarks allow us pinpoint exact location field site relation photos, addition properly scaling spatial models. recommend deploying minimum three GCPs per field site aim survey - simple black--white square tiles known, high-accuracy GPS locations works just fine - crucial deployed flights conducted visible photos mission. GCPs ideally placed along borders study site (properly “frame” extent model), simultaneously encompassing topographical complexity study site. example, ’re surveying flat landscape scattered rocky outcrops, might good idea place GCPs along border field site; within flat ground; finally couple top outcrops. way, multiple reference points landscape minimize risk future processing issues. Keep mind accuracy GCP locations accurate GPS unit used record location . minimal geo-referencing errors, therefore recommend higher-end handheld GNSS system, developed Trimble. information GCPs, PIX4D great article correlate accuracy drone maps. Figure 3. using ground control points (GCPs) missims, important visible across flights","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_n_process_thermal_images.html","id":"processing-thermal-imagery-data","dir":"Articles","previous_headings":"","what":"Processing thermal imagery data","title":"Collect and process thermal images","text":"collected thermal images across multiple flights, next step use photogrammetry software produce thermal orthomosaic images, source R workflow throne package. can think thermal orthomosaic image assembled jigsaw puzzle: puzzle piece thermal image taken drone, processing software puts together (process called photogrammetry), making sure distortion images accounted . constructed thermal orthomosaic, essentially combined individual images taken drone single “snapshot” thermal landscape - ready use ‘throne’. plenty photogrammetry software capable producing orthomosaic images drone imagery, comes set pros cons. use PIX4Dmapper, yet software might accessible everyone. OpenDroneMap offers web-based, open-source free solution, won’t cover , yet might valuable option users. Note also PIX4D plethora resources available online use software (“-” videos articles), ranging load images editing raster images strongly recommend users follow. Regardless, processing thermal images using PIX4Dmapper, recommend following steps: Create project clicking “New Project” “File”. Navigate folder wish project folder saved. recommend saving project folder flight images, assuming images sorted flight mission. Select images (RGB thermal) flight mission, photos relevant specific flight. prompted, select Thermal Camera default processing template. visible menu adding loading photos project. information, see PIX4D’s article Processing Options Default Templates Ensure “Pixel Size” “Focal Length” values correctly set camera model: menu bar, click Project > Image Properties Editor… section Selected Camera Model, click Edit… step--step instructions modify camera model, refer PIX4D’s article use Editing Camera Model Options. starting processing, open “Processing Options” navigate Keypoints Image Scale “Initial Processing” set “Full”; navigate “Point Cloud Mesh” Point Cloud set Image Scale 1 (original). settings increase density keypoints resolution final product, cost processing time (values can left unchanged, note quality subsequent processing steps R affected). desired, can save custom template future throne flight processes, clicking “Save Template”. wish use (don’t access ) ground control points, go ahead click “Start” Processing bar begin processing images. thermal landscape map generated final step, “3. DSM, Orthomosaic, Index.”. Processing time depends specifications PC used size project, usually lasts couple hours. can adjust resources (GB RAM CPU threads) PIX4Dmapper use “Processing options”. Note default use PC’s available resources. Figure 4. create start processing project Pix4Dmapper","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_n_process_thermal_images.html","id":"note-on-gcps-while-processing-thermal-imagery","dir":"Articles","previous_headings":"Processing thermal imagery data","what":"Note on GCPs while processing thermal imagery","title":"Collect and process thermal images","text":"ground control points used project within Pix4D mapper, make sure import starting processing. PIX4D extensive -guides topic, applies generating raster images throne well. general advice: PIX4Dmapper, easiest way import ground control points loading .csv-file contains latitude, longitude altitude GCPs, using “GCP/MTP Manager” first processing step (“Initial Processing”) completed. Make sure GCPs project coordinate system. loading GCP points, appear “pins” point cloud, visible rayCloud viewer. Manually match photos GCPs visible using rayCloud editor. Refer PIX4D documentation information. Continue selecting “Reoptimize” project, “Process” drop-menu continue second third processing steps. using DJI drone, may encounter issues importing GCP coordinates .csv-file. case, first manually create tie points GCPs marked GCPs multiple photos (identical names labels .csv-file) import coordinates using “GCP/MTP Manager”. Finish clicking “Rematch Optimize”, “Process” drop menu. Figure 5. Ground control points (GCPs) show blue/green markers rayCloud editor loaded optimized point cloud PIX4D automatically create sub folders processing step project, contained main folder specified directory loading photos. final thermal orthomosaic image can found project’s subfolder named “3_dsm_ortho/2_mosaic”. two .tif-files folder. Extract one visual orthomosaic (.e. non-black--white image) export directory can used subsequent processing steps within R workflow throne.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_n_process_thermal_images.html","id":"note-on-links-to-commercial-sites","dir":"Articles","previous_headings":"Processing thermal imagery data","what":"Note on links to commercial sites","title":"Collect and process thermal images","text":"Although include links multiple commercial sites throughout vignette, financial interest recommending particular product users throne. devices software list worked purposes know us. Next move next step workflow, collect operative temperature model data. Previous: Overview Next: Collect OTM data","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_otm_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Collect and process OTM data","text":"vignette goal present co-first step workflow presented throne package, collection operative temperature model (OTM) data.collect data need 1) build, 2) program, 3) deploy 4) read measurements collected OTM. , provide general guidelines perform steps integrate adequately software developed throne package. context whole package’s workflow, highlight areas covered vignette : Figure 1. Part workflow covered vignette","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_otm_data.html","id":"building-otms","dir":"Articles","previous_headings":"","what":"Building OTMs","title":"Collect and process OTM data","text":"Typically, OTM sum two components; body temperature logger contained inside body. physical properties body OTM determine internal temperature turn captured temperature logger. goal building OTM’s body matches biophysical properties organism interest accurately possible temperature measured logger closely matches organism experience exact spot OTM deployed. concept operative temperature. end, recommended body similar volume, mass color organism interest ensure properties conduction convection radiative heat transfer comparable. Many techniques employed years achieve body characteristics. instance, among studies terrestrial ectotherms (OTMs commonly used), copper pipes historically considered accurate analog many organisms. However, part separate study, showed 3D printing can surpass performance copper pipes fraction cost. strongly recommend 3D printing build OTM bodies detail Alujević et al. 2024. example, picture OTM bodies used study: Figure 2. operative temperature model (OTM) used study second component OTM temperature logger. recommend using iButton temperature loggers. study, used thermocron DS1921G-F5# Embedded data systems ~ 50 US Dollars / unit (40 US Dollar / unit ordered bulk). models available similar prices leave user make choice. Nonetheless, choosing temperature logger model recommend considering: temperature logger temperature range encompasses typical range temperatures occur area interest. high recording accuracy. example, logger can record temperature changes 0.1 C intervals accurate one can record temperature changes 1 C intervals. thermal resolution relevant study. example, iButton can record temperature changes 10 C intervals optimal studying micro climatic variation order C, temperature logger resolution 0.5 - 1 C might suffice. temperature logger can store number readings frequency adequate study. Ideally OTMs deployed field longer periods time user need consider trade-logging frequency relevant capture thermal fluctuations environment number readings logger can store logging frequency.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_otm_data.html","id":"programming-temperature-loggers","dir":"Articles","previous_headings":"","what":"Programming temperature loggers","title":"Collect and process OTM data","text":"OTM deployed field, temperature logger contains must programmed. Programming temperature loggers might specific logger brand model. case, program iButton 3 things needed, 1) reader able read transfer data iButton, 2) adapter can transmit information reader computer 3) processing software instructions data can inputed retrieved. purposes used DS1402D-DR8 + iButton Reader DS9490B# USB 1-Wire Adapter iButtonlink software OneWireViewer Analog Devices. hardware software used outcome achieved strongly recommend using OneWireViewer software front completely free. spirit, offer short step step tutorial programm iButtons using software also present GIF : Download OneWireViewer. instructional video get started can found . Note software Java-based applet, Java need installed proceeding. Connect adapter reader. Insert iButton reader available USB-port. software launched first time, USB port need selected. Choose USB-port drop-list prompted. Insert iButton reader. iButton working appear device serial number software’s left window panel; iButton show likely unusable malfunctioning. Select iButton list devices left, go “Thermochron” tab. Click “Start new mission” start programming iButton. Check box says “Synchronize Real-time Clock”. make sure iButton’s internal real-time clock synchronized time PC used programming. Enter “Sampling Rate”, minutes. Enter “Mission Start Delay”, time first data sample collected. Note minutes; example, 24h delay recording delay need 1440 minutes. “Enable Rollover” unless want data overwritten memory full. Click “OK”. line reading “Mission Active?” change “False” “True” within second two. also display “First sample yet collected”. Insert iButton inside OTM ensuring air-tight, water-proof seal achieved OTM ready deployed field. Figure 2: Step--step process program iButton using OneWireViewer software NOTE: user figure math related sampling rate dependent iButton’s storing capacity (.e., number readings can hold). Often, need record temperatures long period time minimizes number observations within given day. end, recommend , multiple OTMs deployed, “Mission Start Delay” modified accordingly certain degree staggering measurements record. Say interested recording daily thermal fluctuations period multiple months minimum sampling rate can afford 2h. case recommend splitting OTMs two groups one “Mission Start Delay” 1440 minutes another 1500 eventual recordings staggered 60 minutes.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_otm_data.html","id":"deploying-otms-in-the-field","dir":"Articles","previous_headings":"","what":"Deploying OTMs in the field","title":"Collect and process OTM data","text":"OTMs programmed next step deploy field. general rule recommend deploying maximum number OTMs possible within budget constraints. greater number OTMs enable capture greater number thermal microhabitats crucial subsequent steps throne package. addition, recommend informed opposed random deployment throughout area study minimize degree overlap information provided logger. achieve informed deployment, recommend following: Become familiar area study identify general microhabitat types target well daily temperature fluctuations. key point identifying general orientation study site determine incidence sun. Deploy OTMs evenly across microhabitats surfaces different orientations within site. possible, add replicates number possible replicates limited, favor microhabitats represented area study. example, study area considered pilot methodology throne package slope small outcrop Great Basin Desert. examining environment, considered placing OTMs faces outcrops (rocks > 2m diameter), boulders (1-2 m), rocks (< 1 m), ground inside small bushes adequate representation available micro habitats. Additionally, outcrop relatively rough terrain (see ), generated slopes facing towards cardinal directions (N, NE, E, SE, S, SW & W) intentionally placed OTMs facing perpendicularly towards directions. Figure 3: Elevational profile area study","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_otm_data.html","id":"reading-ibutton-data","dir":"Articles","previous_headings":"","what":"Reading iButton data","title":"Collect and process OTM data","text":"last step process recover OTMs field read data collected iButtons. reading process similar programming steps 2-4 . offer yet another small tutorial fully read download data also show GIF (Figure 4): Select iButton software’s left window pane. Navigate “Thermocron” tab, “Temperatures”. reader take second display graph temperatures plotted time. graph shows , right-click anywhere within graph window drop-menu appear. Select “Save Data .csv File” save file directory within computer. Keep track directory direction input subsequent R functions part throne R workflow. NOTE: data remain iButton programmed anew. start new mission, old mission data lost, strongly(( recommend make sure data correctly downloaded re-deployment. Figure 4 Step--step process read data logged iButton using OneWireViewer software","code":""},{"path":"https://ggcostoya.github.io/throne/articles/collect_otm_data.html","id":"note-on-links-to-commercial-sites","dir":"Articles","previous_headings":"Reading iButton data","what":"Note on links to commercial sites","title":"Collect and process OTM data","text":"Although include links multiple commercial sites throughout vignette, financial interest recommending particular product users throne. devices software list worked purposes know us. Next move R workflow throne package, starting read process .tif files obtained via aerial photogrammetry. Previous: Collect process thermal imagery Next: Read process flights data","code":""},{"path":"https://ggcostoya.github.io/throne/articles/correcting_flight_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Correcting flight data","text":"vignette, aim illustrate correct temperature data obtained using thermal photogrammetry. correcting, referring process transforming temperature measurements made via IR cameras mounted drone operative temperatures measured using operative temperature model (OTM). highlight section package’s workflow covered vignette:  need correction stems fundamental difference temperature estimates made using IR camera made making physical contact object. IR camera measurement influenced wide range factors including object’s emissivity, conditions image taken (ambient temperature, amount light etc. see Playà-Montmany & Tattersall 2021 details). contrast, OTMs designed record temperature measurements match internal body temperature organism closely possible. achieved enclosing temperature logger (e.g., iButton) inside structure similar size similar surface properties organism interest. methodology used extensively field thermal ecology recent advances minimized costs production maximized accuracy OTMs (see past work Alujević et al. 2024). Due , IR camera drone OTM ultimately record fundamentally different temperature metrics. thermal measurements estimated using drone truly representative organism experiencing, must corrected instead describe operative temperatures.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/correcting_flight_data.html","id":"the-correct_flights_data-function","dir":"Articles","previous_headings":"","what":"The correct_flights_data function","title":"Correcting flight data","text":"transform temperature measurements obtained using drone-mounted IR camera operative temperature measurements, throne package includes correct_flights_data function. function perform double correction data obtained flight correcting 1) differences light conditions across multiple flights 2) inherent difference physical properties IR operative temperature measurements.perform correction, function take 2 inputs: flights_data tibble obtained rnp_flights_data function like one : otm_splines complex tibble obtained generate_otm_splines function like one seen : data sets contain latitude longitude information. crucial step correction process, first task filter flights_data contain tiles (.e., unique latitude longitude combinations) OTMs actually deployed. tiles filtered, use spline models estimate temperature OTM exact year, day year (doy) minute day (mod) flights took place. result tibble unique latitude & longitude unique year, doy mod IR temperature measurement (ir_temp, drone) associated operative temperature measurement (op_temp, OTM) seen : tibble contains mod_start mod_end columns. mod flight started flight ended. example data, flights relatively fast (~ 4 minutes) cover larger areas flights going longer. case, predicted operative temperature (op_temp) OTM tile average temperature duration flight. Using data can visualize need correction:  shown , consistent bias two measurements, IR temperatures generally cooler operative temperatures high values opposite holding true low values. Note line best linear fit substantially different gray line indicates ideal 1:1 relationship. can easily appreciated running simple linear regression ir_temp op_temp. (Intercept) slope (.e., Estimate op_temp ) 6.23 0.75 , ideally, want 0 1 respectively. \\(R^2\\) (R-squared model’s output) relationship 0.625, improved match two measurements also want \\(R^2\\) closer 1. step implement first correction, date time flight. flights took place different days different mod environmental temperature light conditions variable. can visualize bias measurements (.e., op_temp - ir_temp) different depending mod.  Flights closer middle day (.e., ~ 11:00 - 13:00 mod 660 - 800) light conditions optimal tend less biased whereas flights earlier morning afternoon affected . Based , first correction 1) caculate average bias flight 2) subtract bias ir_temp measurements flight. correction implemented relationship ir_temp op_temp looks like:  Although model’s Intercept slope worsened (6.22 12.11 0.74 0.69) \\(R^2\\) model improved (0.625 0.678) can appreciated reduced amount error around line best fit. , apply second correction correcting temperature value . using estimates linear regression correct IR temperature measurements (already corrected year, doy mod, indicated *) operative measurements following formula: \\[Fully\\; corrected\\; surface\\; temperature = \\frac{-Intercept + Time\\; corrected\\; surface\\; temperature}{Slope}\\] implement formula can see Intercept relationship now 3.76 slope 0.9 much closer desired values 0 1 respectively. also apparent plotting relationship line best fit now close 1:1 line.  example effects correction across flights provided example data sets throne package. columns across panels indicate plot shows thermal landscape IR temperatures (Pre-correction) corrected IR temperatures now operative temperatures (Post-correction). rows indicate mod day flight took place:  correction results slight shift, generally towards warmer wider temperature distributions higher mean temperature variance:","code":"flights_data ## # A tibble: 263,008 × 7 ##    longitude latitude ir_temp  year   doy mod_start mod_end ##        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> ##  1     -120.     39.9    12.5  2023   236       515     519 ##  2     -120.     39.9    14.4  2023   236       515     519 ##  3     -120.     39.9    14.0  2023   236       515     519 ##  4     -120.     39.9    13.7  2023   236       515     519 ##  5     -120.     39.9    14.6  2023   236       515     519 ##  6     -120.     39.9    15.3  2023   236       515     519 ##  7     -120.     39.9    14.5  2023   236       515     519 ##  8     -120.     39.9    14.5  2023   236       515     519 ##  9     -120.     39.9    13.9  2023   236       515     519 ## 10     -120.     39.9    13.9  2023   236       515     519 ## # ℹ 262,998 more rows otms_splines ## # A tibble: 132 × 9 ##    otm_id  year   doy microhabitat orientation latitude longitude elevation ##    <chr>  <dbl> <dbl> <chr>        <chr>          <dbl>     <dbl>     <dbl> ##  1 OTM01   2023   236 outcrop      N               39.9     -120.     1312. ##  2 OTM01   2023   237 outcrop      N               39.9     -120.     1312. ##  3 OTM01   2023   238 outcrop      N               39.9     -120.     1312. ##  4 OTM01   2023   239 outcrop      N               39.9     -120.     1312. ##  5 OTM02   2023   236 outcrop      W               39.9     -120.     1313. ##  6 OTM02   2023   237 outcrop      W               39.9     -120.     1313. ##  7 OTM02   2023   238 outcrop      W               39.9     -120.     1313. ##  8 OTM02   2023   239 outcrop      W               39.9     -120.     1313. ##  9 OTM03   2023   236 rock         W               39.9     -120.     1317. ## 10 OTM03   2023   237 rock         W               39.9     -120.     1317. ## # ℹ 122 more rows ## # ℹ 1 more variable: spline <list> correction_data ## # A tibble: 1,114 × 8 ##    latitude longitude  year   doy mod_start mod_end ir_temp op_temp ##       <dbl>     <dbl> <dbl> <dbl>     <dbl>   <dbl>   <dbl>   <dbl> ##  1     39.9     -120.  2023   236       515     519    25.4    30.0 ##  2     39.9     -120.  2023   236       515     519    20.5    26.8 ##  3     39.9     -120.  2023   236       515     519    27.8    30.3 ##  4     39.9     -120.  2023   236       515     519    21.3    28.3 ##  5     39.9     -120.  2023   236       515     519    28.0    33.8 ##  6     39.9     -120.  2023   236       515     519    20.4    19.7 ##  7     39.9     -120.  2023   236       515     519    19.1    21.3 ##  8     39.9     -120.  2023   236       515     519    22.9    28.5 ##  9     39.9     -120.  2023   236       515     519    22.1    28.2 ## 10     39.9     -120.  2023   236       515     519    19.9    30.5 ## # ℹ 1,104 more rows summary(lm(ir_temp ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = ir_temp ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -17.3750  -2.5640   0.0021   2.7808  17.1201  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept)   6.2269     0.6906   9.017   <2e-16 *** ## op_temp       0.7492     0.0174  43.052   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 4.184 on 1112 degrees of freedom ## Multiple R-squared:  0.625,  Adjusted R-squared:  0.6247  ## F-statistic:  1853 on 1 and 1112 DF,  p-value: < 2.2e-16 summary(lm(ir_temp_corr ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = ir_temp_corr ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -15.3410  -2.3108  -0.0795   2.0655  18.2656  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept) 12.11754    0.56523   21.44   <2e-16 *** ## op_temp      0.68946    0.01424   48.40   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 3.424 on 1112 degrees of freedom ## Multiple R-squared:  0.6781, Adjusted R-squared:  0.6778  ## F-statistic:  2343 on 1 and 1112 DF,  p-value: < 2.2e-16 # estimate op_temp after correction correction_data$op_temp_corr <- (-12.11754 + correction_data$ir_temp_corr)/0.68946 summary(lm(op_temp_corr ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = op_temp_corr ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -22.2508  -3.3517  -0.1152   2.9959  26.4926  ##  ## Coefficients: ##               Estimate Std. Error t value Pr(>|t|)     ## (Intercept) -6.058e-06  8.198e-01     0.0        1     ## op_temp      1.000e+00  2.066e-02    48.4   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 4.967 on 1112 degrees of freedom ## Multiple R-squared:  0.6781, Adjusted R-squared:  0.6778  ## F-statistic:  2343 on 1 and 1112 DF,  p-value: < 2.2e-16"},{"path":"https://ggcostoya.github.io/throne/articles/correct_flights_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Correcting flight data","text":"vignette, aim illustrate correct temperature data obtained using thermal photogrammetry. correcting, referring process transforming temperature measurements made via IR cameras mounted drone operative temperatures measured using operative temperature model (OTM). highlight section package’s workflow covered vignette:  need correction stems fundamental difference temperature estimates made using IR camera OTM. IR camera measurement influenced wide range factors including object’s emissivity, conditions image taken (ambient temperature, amount light etc. see Playà-Montmany & Tattersall 2021 details). contrast, OTMs designed record temperature measurements match internal body temperature organism closely possible. achieved enclosing temperature logger (e.g., iButton) inside structure similar size similar surface overall thermal properties organism interest. methodology used extensively field thermal ecology recent advances minimized costs production maximized accuracy OTMs (see past work Alujević et al. 2024). Due , IR camera drone OTM ultimately record fundamentally different temperature metrics. thermal measurements estimated using drone truly representative organism experiencing, must corrected instead describe operative temperatures.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/correct_flights_data.html","id":"the-correct_flights_data-function","dir":"Articles","previous_headings":"","what":"The correct_flights_data function","title":"Correcting flight data","text":"transform temperature measurements obtained using drone-mounted IR camera operative temperature measurements, throne package includes correct_flights_data function. function perform double correction data obtained flight correcting 1) differences light conditions across multiple flights 2) inherent difference physical properties IR operative temperature measurements.perform correction, function take 2 inputs: flights_data tibble obtained rnp_flights_data function like one : otm_splines nested tibble obtained gen_otm_splines function like one seen : data sets contain latitude longitude information. crucial step correction process, first task filter flights_data contain tiles (.e., unique latitude longitude combinations) OTMs actually deployed. tiles filtered, use spline models estimate temperature OTM exact year, day year (doy) minute day (mod) flights took place. result tibble unique latitude & longitude unique year, doy mod IR temperature measurement (ir_temp, drone) associated operative temperature measurement (op_temp, OTM) seen : tibble contains mod_start mod_end columns. mod flight started flight ended. example data, flights relatively fast (~ 4 minutes) cover larger areas flights going longer. case, predicted operative temperature (op_temp) OTM tile average temperature duration flight. Using data can visualize need correction:  shown , consistent bias two measurements, IR temperatures generally cooler operative temperatures high values opposite holding true low values. Note line best linear fit substantially different gray line indicates ideal 1:1 relationship. can easily appreciated running simple linear regression ir_temp op_temp. (Intercept) slope (.e., Estimate op_temp ) 6.23 0.75 , ideally, want 0 1 respectively. \\(R^2\\) (R-squared model’s output) relationship 0.625. good match two measurements also want \\(R^2\\) closer 1. step implement first correction date time flight. flights took place different days different mod environmental temperature light conditions variable. can visualize bias measurements (.e., op_temp - ir_temp) different depending mod.  Flights closer middle day (.e., ~ 11:00 - 13:00 mod 660 - 800) light conditions optimal tend less biased whereas flights earlier morning afternoon affected . Based , first correction 1) caculate average bias flight 2) subtract bias ir_temp measurements flight. correction implemented relationship ir_temp op_temp looks like:  Although model’s Intercept slope worsened (6.22 12.11 0.74 0.69) \\(R^2\\) model improved (0.625 0.678) can appreciated reduced amount error around line best fit. , apply second correction correcting temperature value . using estimates linear regression correct IR temperature measurements (already corrected year, doy mod, indicated *) operative measurements following formula: \\[Fully\\; corrected\\; surface\\; temperature = \\frac{-Intercept + Time\\; corrected\\; surface\\; temperature}{Slope}\\] implement formula can see Intercept relationship now practically 0 slope 1, ideal:  example effects correction across flights provided example data sets throne package. columns across panels indicate plot shows thermal landscape IR temperatures (Pre-correction) corrected IR temperatures temperatures (Post-correction .e., operative temperatures). rows indicate mod day flight took place:  Next, introduce final step throne workflow. use corrected flights data combination OTM-specific splines first match two data types ultimately predict thermal landscapes. Previous: Read process OTM data Generating OTM splines Next: Match data Predict thermal landscapes","code":"flights_data ## # A tibble: 263,008 × 7 ##    longitude latitude ir_temp  year   doy mod_start mod_end ##        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> ##  1     -120.     39.9    12.5  2023   236       515     519 ##  2     -120.     39.9    14.4  2023   236       515     519 ##  3     -120.     39.9    14.0  2023   236       515     519 ##  4     -120.     39.9    13.7  2023   236       515     519 ##  5     -120.     39.9    14.6  2023   236       515     519 ##  6     -120.     39.9    15.3  2023   236       515     519 ##  7     -120.     39.9    14.5  2023   236       515     519 ##  8     -120.     39.9    14.5  2023   236       515     519 ##  9     -120.     39.9    13.9  2023   236       515     519 ## 10     -120.     39.9    13.9  2023   236       515     519 ## # ℹ 262,998 more rows otms_splines ## # A tibble: 132 × 9 ##    otm_id  year   doy microhabitat orientation latitude longitude elevation ##    <chr>  <dbl> <dbl> <chr>        <chr>          <dbl>     <dbl>     <dbl> ##  1 OTM01   2023   236 outcrop      N               39.9     -120.     1312. ##  2 OTM01   2023   237 outcrop      N               39.9     -120.     1312. ##  3 OTM01   2023   238 outcrop      N               39.9     -120.     1312. ##  4 OTM01   2023   239 outcrop      N               39.9     -120.     1312. ##  5 OTM02   2023   236 outcrop      W               39.9     -120.     1313. ##  6 OTM02   2023   237 outcrop      W               39.9     -120.     1313. ##  7 OTM02   2023   238 outcrop      W               39.9     -120.     1313. ##  8 OTM02   2023   239 outcrop      W               39.9     -120.     1313. ##  9 OTM03   2023   236 rock         W               39.9     -120.     1317. ## 10 OTM03   2023   237 rock         W               39.9     -120.     1317. ## # ℹ 122 more rows ## # ℹ 1 more variable: spline <list> correction_data ## # A tibble: 1,114 × 8 ##    latitude longitude  year   doy mod_start mod_end ir_temp op_temp ##       <dbl>     <dbl> <dbl> <dbl>     <dbl>   <dbl>   <dbl>   <dbl> ##  1     39.9     -120.  2023   236       515     519    25.4    30.0 ##  2     39.9     -120.  2023   236       515     519    20.5    26.8 ##  3     39.9     -120.  2023   236       515     519    27.8    30.3 ##  4     39.9     -120.  2023   236       515     519    21.3    28.3 ##  5     39.9     -120.  2023   236       515     519    28.0    33.8 ##  6     39.9     -120.  2023   236       515     519    20.4    19.7 ##  7     39.9     -120.  2023   236       515     519    19.1    21.3 ##  8     39.9     -120.  2023   236       515     519    22.9    28.5 ##  9     39.9     -120.  2023   236       515     519    22.1    28.2 ## 10     39.9     -120.  2023   236       515     519    19.9    30.5 ## # ℹ 1,104 more rows summary(lm(ir_temp ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = ir_temp ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -17.3750  -2.5640   0.0021   2.7808  17.1201  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept)   6.2269     0.6906   9.017   <2e-16 *** ## op_temp       0.7492     0.0174  43.052   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 4.184 on 1112 degrees of freedom ## Multiple R-squared:  0.625,  Adjusted R-squared:  0.6247  ## F-statistic:  1853 on 1 and 1112 DF,  p-value: < 2.2e-16 summary(lm(ir_temp_corr ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = ir_temp_corr ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -15.3410  -2.3108  -0.0795   2.0655  18.2656  ##  ## Coefficients: ##             Estimate Std. Error t value Pr(>|t|)     ## (Intercept) 12.11754    0.56523   21.44   <2e-16 *** ## op_temp      0.68946    0.01424   48.40   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 3.424 on 1112 degrees of freedom ## Multiple R-squared:  0.6781, Adjusted R-squared:  0.6778  ## F-statistic:  2343 on 1 and 1112 DF,  p-value: < 2.2e-16 # estimate op_temp after correction correction_data$op_temp_corr <- (-12.11754 + correction_data$ir_temp_corr)/0.68946 summary(lm(op_temp_corr ~ op_temp, data = correction_data)) ##  ## Call: ## lm(formula = op_temp_corr ~ op_temp, data = correction_data) ##  ## Residuals: ##      Min       1Q   Median       3Q      Max  ## -22.2508  -3.3517  -0.1152   2.9959  26.4926  ##  ## Coefficients: ##               Estimate Std. Error t value Pr(>|t|)     ## (Intercept) -6.058e-06  8.198e-01     0.0        1     ## op_temp      1.000e+00  2.066e-02    48.4   <2e-16 *** ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 ##  ## Residual standard error: 4.967 on 1112 degrees of freedom ## Multiple R-squared:  0.6781, Adjusted R-squared:  0.6778  ## F-statistic:  2343 on 1 and 1112 DF,  p-value: < 2.2e-16"},{"path":"https://ggcostoya.github.io/throne/articles/drone_setup.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Obtaining thermal orthomosaics `(.tif)`","text":"goal vignette illustrate first step workflow presented throne package acquisition thermal photogrammetry data. , need 1) acquire drone mounted IR thermal imaging camera, 2) fly drone collect thermal images, 3) process thermal images using photogrammetry software obtain thermal orthomosaic flight (.e., .tif format file). provide instructions perform steps include links recommended drones, software tutorials complement . Figure 1. Part workflow covered vignette","code":""},{"path":"https://ggcostoya.github.io/throne/articles/drone_setup.html","id":"acquiring-a-thermal-imaging-drone","dir":"Articles","previous_headings":"","what":"Acquiring a thermal imaging drone","title":"Obtaining thermal orthomosaics `(.tif)`","text":"Unmanned aerial vehicles (UAVs), colloquially known “drones”, rapidly becoming cheaper accessible use. Drones come shapes sizes, first-person view (FPV) miniature racing quadcopters, large payload-carrying hexcopters. Hobbyists can purchase fly smaller drones recreational purposes less $500 ([DJI Mini SE 2] (https://www.dji.com/mini-2-se)), drone used commercial (research) purposes may require higher specifications (extending $5000+). example, expensive drones typically come accurate -board geolocation systems (GNSS RTK modules), better -flight stabilization systems accurate photography, batteries higher capacity, obstacle detection sensors, stronger protection elements (rain, heat, dust etc.). importantly, higher-quality drones designed reliably carry expensive camera equipment, high-resolution visual (RGB) cameras topography models, near-infrared cameras mapping vegetation, infrared cameras (FLIR cameras, developed Teledyne Systems) build thermal landscape models. choosing drone equipped infrared camera (“thermal drone”), important note camera typically paired particular drone model. Different drones different gimbal (camera) mounting systems, means cameras rarely interchangeable. also important note paired thermal cameras typically expensive - expensive - drone . price thermal camera typically determined accuracy resolution (rarely exceeding 640x512 pixels - considerably lower RGB cameras). Purchasing thermal drone therefore considered investment last many years anyone interested conducting high-resolution thermal research. Currently, DJI Enterprises dominates market many drone options capable equipped thermal cameras. DJI Mavic 3T thermal variant commonly used DJI Mavic 3 drone, costs approximately $5,000. higher end spectrum, approximately $9,000, DJI also sells [Matrice 30T] (https://enterprise.dji.com/matrice-30) much rugged, boasts accurate -board positioning system, equipped higher-resolution cameras, overall designed chart larger, remote areas. Finally, fairly large market used drones, can option budget concern. used DJI Matrice 200 v2(model use, equipped Zenmuse XT2 camera), can 2024 purchased approximately $2,000. Overall, often intend use drone, environmental conditions field site key factors consider choosing buy. specifications required accurately survey study site largely depend spatial scale wish predict thermal landscape.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/drone_setup.html","id":"flying-drones-and-collecting-thermal-imagery","dir":"Articles","previous_headings":"Acquiring a thermal imaging drone","what":"Flying drones and collecting thermal imagery","title":"Obtaining thermal orthomosaics `(.tif)`","text":"acquired drone thermal camera, next step fly drone collect thermal images.Commonly, thermal imaging drones come mission (.e., flight plan) setting software. case, used DJI PilotXX comes drone model, online detailed training course tutorials set flights online. Since software different, won’t provide tutorial rather give general guidelines conduct missions work optimally possible software developed throne. Naturally, flight mission details depend UAV’s camera setup, generally speaking, standard mission planning etiquette applies collecting data use within throne: Abide local laws regulations regarding flight altitude, airspace restrictions drone registration requirements. Check local authorities applies area study. example, flying U.S. airspace, adhere Code Federal Regulations (CFR) Part 107, make flights take place Class G airspace, unless given explicit permission fly elsewhere. used research purposes, drone might also need registered commercial use. default drone flight path (“zig-zag line”) generally fine purposes. recommend avoid long, narrow flight paths minimize banding issues (differences long “strips” photos), users aim keep flight times short possible make sure images collected within relatively short span thus can capture thermal conditions. Fly weather conditions typical study system interest. recommend distributing flights across different days across different times day, maximize representation daily fluctuations temperature avoid stitching issues, recommend flying larger area area interest. important aspect consider planning flight mission also resolution mounted thermal imaging camera. Usually, thermal imaging cameras much lower resolution field view visual cameras (RGB). Therefore, make sure vertical horizontal photo overlap ratio set high (preferably 90%/90% either direction, .e., given photo’s coverage differs 10% compared previous), well maintain relatively high flight altitude (300 ft / 90 m). , course, depends spatial scale studied landscape desired resolution thereof. Regardless,strongly encourage make sure missions built around thermal camera’s field view rather visual camera - especially flying rugged terrain- otherwise risk running stitching issues processing photos, (see following sections) ’s generally good idea extend flight mission area exceed study site’s boundaries meters compensate difference. Figure 1. field view typically smaller thermal cameras compared visual cameras. overlay - perfect - aims show difference visual thermal photo taken right one another, illustrate difference area covered final important factor consider potential geolocation errors thermal images . can compensated post-processing, deploying ground control points (GCPs) one common methods can used preventative measure accurately georeference flight missions. Ground control points GPS-tagged landmarks allow us pinpoint exact location field site relation photos, addition properly scaling spatial models. recommend deploying minimum three GCPs per field site aim survey - simple black--white square tiles collect known GPS locations works just fine - crucial deployed flights visible photos mission. GCPs ideally placed along borders study site (properly “frame” extent model), simultaneously encompassing topographical complexity study site. example, ’re surveying flat landscape scattered rocky outcrops, might good idea place GCPs along border field site; within flat ground; finally couple top outcrops. way, multiple reference points landscape minimize risk future processing issues. Keep mind accuracy GCP locations accurate GPS unit used record location . minimal geo-referencing errors, therefore recommend higher-end handheld GNSS system, developed Trimble. information GCPs, PIX4D great article correlate accuracy drone maps. Figure 2. using ground control points (GCPs) missims, important visible across flights","code":""},{"path":"https://ggcostoya.github.io/throne/articles/drone_setup.html","id":"processing-thermal-imagery-data","dir":"Articles","previous_headings":"","what":"Processing thermal imagery data","title":"Obtaining thermal orthomosaics `(.tif)`","text":"collected thermal images across multiple flights, next step use photogrammetry software produce thermal orthomosaic images, source R workflow throne package. can think thermal orthomosaic image assembled jigsaw puzzle: puzzle piece thermal image taken drone, processing software puts together (process called photogrammetry), making sure distortion images accounted . constructed thermal orthomosaic, essentially combined individual images taken drone single “snapshot” thermal landscape - ready use ‘throne’. plenty photogrammetry software capable producing orthomosaic images drone imagery, comes set pros cons. use PIX4Dmapper, yet software might accessible everyone. OpenDroneMap offers web-based, open-source free solution, won’t cover , yet might valuable option users. Note also PIX4D plethora resources available n online use software (“-” videos articles), ranging load images editing raster images strongly recommend users follow. Regardless, processing thermal images using PIX4Dmapper, recommend following steps: Create project clicking “New Project” “File”. Navigate folder wish project folder saved. recommend saving project folder flight images, assuming images sorted flight mission. Select images (RGB thermal) flight mission, photos relevant specific flight. prompted, select Thermal Camera default processing template. visible menu adding loading photos project. information, see PIX4D’s article Processing Options Default Templates Ensure “Pixel Size” “Focal Length” values correctly set camera model: menu bar, click Project > Image Properties Editor… section Selected Camera Model, click Edit… step--step instructions modify camera model, refer PIX4D’s article use Editing Camera Model Options. starting processing, open “Processing Options” navigate Keypoints Image Scale “Initial Processing” set “Full”; navigate “Point Cloud Mesh” Point Cloud set Image Scale 1 (original). settings increase density keypoints resolution final product, cost processing time. (values can left unchanged, note quality subsequent processing steps R affected). desired, can save custom template future throne flight processes, clicking “Save Template”. wish use (don’t access ) ground control points, go ahead click “Start” Processing bar begin processing images. thermal landscape map generated final step, “3. DSM, Orthomosaic, Index.”. Processing time depends specifications PC used size project, usually lasts couple hours. WeYou can adjust resources (GB RAM CPU threads) PIX4Dmapper use “Processing options”. Note default use PC’s available resources. Figure 3. create start processing project Pix4Dmapper","code":""},{"path":"https://ggcostoya.github.io/throne/articles/drone_setup.html","id":"note-on-gcps-while-processing-thermal-imagery","dir":"Articles","previous_headings":"Processing thermal imagery data","what":"Note on GCPs while processing thermal imagery","title":"Obtaining thermal orthomosaics `(.tif)`","text":"ground control points aproject within Pix4D mapper, make sure import starting processing. PIX4D extensive -guides topic, applies generating raster images throne well. general advice: PIX4Dmapper, easiest way import ground control points loading .csv-file contains latitude, longitude altitude GCPs, using “GCP/MTP Manager” first processing step (“Initial Processing”) completed. Make sure GCPs project coordinate system. loading GCP points, appear “pins” point cloud, visible rayCloud viewer. Manually match photos GCPs visible using rayCloud editor. Refer PIX4D documentation information. Continue “Reoptimize” project, “Process” drop-menu continue second third processing steps. using DJI drone, may encounter issues importing GCP coordinates .csv-file. case, first manually create tie points GCPs marked GCPs multiple photos (identical names labels .csv-file) import coordinates using “GCP/MTP Manager”. Finish clicking “Rematch Optimize”, “Process” drop menu. Figure 4. Ground control points (GCPs) show blue/green markers rayCloud editor loaded optimized point cloud PIX4D automatically create sub folders processing step project, contained main folder specified directory loading photos. final thermal orthomosaic image found project’s subfolder named “3_dsm_ortho” “2_mosaic”. two .tif-files folder. Extract one visual orthomosaic (.e. non-black--white image) export directory can used subsequent processing steps within R workflow throne.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"A worked out example: Thermoregulation in high elevation lizards","text":"vignette illustrate case study serve worked example implement throne method. example, looking thermal environment experienced population western fence lizards (Sceloporus occidentalis) living approximately 2400 m elevation Great Basin Northern Nevada undergoing mark-recapture. Following throne method, first describe field methodology (.e., flights conducted, operative temperature model deployment etc.), describe analysis ran R using throne package finally offer insights throne method used ecological studies.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"study-area-and-organism","dir":"Articles","previous_headings":"","what":"Study area and organism","title":"A worked out example: Thermoregulation in high elevation lizards","text":"population western fence lizards discussed example inhabits high elevation outcrop Great Basin Northern Nevada. site characterized mosaic sagebrush pinyon-juniper woodlands interrupted rocky outcrops varying sizes. area interest also remarked degree topographic heterogeneity ridge along north-south axis dividing two slopes: one  eastern-facing gentle slope western-facing steep slope areas becomes precipice: Study area within Great Basin Northern Nevada, red rectangle indicates specific area interest focusing . Topography area study. ridge divides area eastern-facing side relatively gentle slope western-facing side steep slope even becoming precipice spots study organism example western fence lizard (Sceloporus occidentalis), common lizard western US locally abundant study area. lizard predominately spotted rocky outcrops interrupt landscape uses bask day-time hours. example, focus 10 adult lizards underwent mark-recapture month August 2022. western fence lizard basking rock study area. Note individual marked color combination painted side (Blue - Silver - Pink) used identify field.","code":""},{"path":[]},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"collect-and-process-thermal-images-","dir":"Articles","previous_headings":"Field workflow","what":"Collect and process thermal images.","title":"A worked out example: Thermoregulation in high elevation lizards","text":"flew 3 flights ~ 95000 \\(m^2\\) area overlapping areas surveyed part lizard mark-recapture. Two flights conducted day (08/04/2022) 07:55 11:21 third flight conducted 2 days later 16:05. ’s metadata file flights conducted: flights processed using software Pix4D following steps present Collecting process thermal images vignette included part throne documentation obtain 3 thermal orthomosaic files (.e., .tif files).","code":"##    flight_id     date time_start time_end ## 1 c_flight_1 8/6/2022      16:05    16:28 ## 2 c_flight_2 8/4/2022      11:21    11:45 ## 3 c_flight_3 8/4/2022       7:55     8:19"},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"collect-and-process-operative-temperature-data","dir":"Articles","previous_headings":"Field workflow","what":"Collect and process operative temperature data","title":"A worked out example: Thermoregulation in high elevation lizards","text":"3D printed 150 operative temperature models using ABS plastic shape, size painted match reflective properties western fence lizard. Inside model, placed Thermocron iButton logger set record temperature every 60 minutes. deployed OTMs randomly throughout site , time, expertise necessary informed deployment. Fortunately, sheer number OTMs deployed enabled us capture wide enough range micro habitats. operative temperature model type used study. OTM metadata file assembled looked like: Map study area (shaded) locations OTMs deployed. Note OTMs fell inside area study due proximity, can used subsequent analysis within pipeline","code":"## # A tibble: 150 × 3 ##    otm_id latitude longitude ##    <chr>     <dbl>     <dbl> ##  1 H1         39.7     -119. ##  2 H2         39.7     -119. ##  3 H3         39.7     -119. ##  4 H4         39.7     -119. ##  5 H5         39.7     -119. ##  6 H6         39.7     -119. ##  7 H7         39.7     -119. ##  8 H8         39.7     -119. ##  9 H9         39.7     -119. ## 10 H10        39.7     -119. ## # ℹ 140 more rows ggplot() +   geom_tile(data = c_flights_data, aes(x = longitude, y = latitude)) +   geom_point(data = c_otms_metadata, aes(x = longitude, y = latitude), size = 2, shape = 21, fill = \"orange\") +   theme_minimal()"},{"path":[]},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"reading-and-processing-flights-data","dir":"Articles","previous_headings":"R workflow","what":"Reading and processing flights data","title":"A worked out example: Thermoregulation in high elevation lizards","text":"Following R workflow specified throne package, first step read process flights data. important part step specify digits argument set spatial resolution tiles final thermal landscape prediction. example, choose set digits = 5 , latitude, lead tile area ~ 0.95 \\(m^2\\), representative micro habitat lizard might experiencing. read process flights data using rnp_flights_data function follows: outcome flights data tibble storing surface temperature (ir_temp) measurements collected across flights: can plot data using ggplot2 tools already get sense thermal characteristics study area:","code":"# set files path flight_files_path <- \"x\" # This would be a folder within the user's computer, not specified here  # read the metadata file  c_flights_metadata <- read.csv(\"data/case_flight_data.csv\")  # read and process flights data c_flights_data <- rnp_flights_data(path = flight_files_path, metadata = c_flights_metadata, digits = 5) c_flights_data ## # A tibble: 304,368 × 7 ##    longitude latitude ir_temp  year   doy mod_start mod_end ##        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> ##  1     -119.     39.7    17.8  2022   218       965     988 ##  2     -119.     39.7    18.2  2022   218       965     988 ##  3     -119.     39.7    13.5  2022   218       965     988 ##  4     -119.     39.7    26.8  2022   218       965     988 ##  5     -119.     39.7    24.5  2022   218       965     988 ##  6     -119.     39.7    18.0  2022   218       965     988 ##  7     -119.     39.7    27.3  2022   218       965     988 ##  8     -119.     39.7    27.2  2022   218       965     988 ##  9     -119.     39.7    22.1  2022   218       965     988 ## 10     -119.     39.7    22.7  2022   218       965     988 ## # ℹ 304,358 more rows c_flights_data %>%    mutate(hour = paste(floor(mod_start/60),\":\", mod_start - floor(mod_start/60) * 60)) %>%    mutate(hour = fct_reorder(hour, mod_start)) %>%   ggplot(aes(x = longitude, y = latitude, fill = ir_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(hour)) +   theme_minimal() +   theme(strip.text = element_text(size = 12))"},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"reading-and-processing-otms-data","dir":"Articles","previous_headings":"R workflow","what":"Reading and processing OTMs data","title":"A worked out example: Thermoregulation in high elevation lizards","text":"next step read process data collected via OTMs. can rnp_otms_data function throne package. , check structure raw OTM .csv files. example look like : taking look (files) can tell need skip rows reading .csv means can set rows_skip argument rnp_otms_data 1, can start reading first row. can also see column raw_data_time contains information date time measurement thus, set date_col argument 1. also specify time_col = 1, ’s necessary time_col specified, rnp_flights_data assume date_col = time_col. Lastly, can see file operative temperature measurements stored second column , result, set op_temp_col argument 2. mind, can read process OTM data follows: outcome OTM data tibble containing observations made OTMs:","code":"##     raw_date_time temp otm ## 1 6/13/2022 14:18 27.0 H22 ## 2 6/13/2022 15:18 18.0 H22 ## 3 6/13/2022 16:18 21.5 H22 ## 4 6/13/2022 17:18 16.0 H22 ## 5 6/13/2022 18:18 10.0 H22 ## 6 6/13/2022 19:18  8.0 H22 # specify the path to where the OTM .csv files are stored c_otms_path <- \"data/case_otm_data\"  # specify the OTM metadata file  c_otms_metadata <- read.csv(\"data/case_otm_metadata.csv\")  # read and process OTMs data c_otms_data <- rnp_otms_data(path = c_otms_path, metadata = c_otms_metadata, rows_skip = 1, date_col = 1, op_temp_col = 2) as_tibble(c_otms_data) ## # A tibble: 262,016 × 7 ##    otm_id  year   doy   mod op_temp latitude longitude ##    <chr>  <dbl> <dbl> <dbl>   <dbl>    <dbl>     <dbl> ##  1 H1      2022   164   910    15       39.7     -119. ##  2 H1      2022   164   970    17       39.7     -119. ##  3 H1      2022   164  1030    16       39.7     -119. ##  4 H1      2022   164  1090    15.5     39.7     -119. ##  5 H1      2022   164  1150    13       39.7     -119. ##  6 H1      2022   164  1210     9       39.7     -119. ##  7 H1      2022   164  1270     4       39.7     -119. ##  8 H1      2022   164  1330     2.5     39.7     -119. ##  9 H1      2022   164  1390     2       39.7     -119. ## 10 H1      2022   165    10     1       39.7     -119. ## # ℹ 262,006 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"generate-otm-spline-models","dir":"Articles","previous_headings":"R workflow","what":"Generate OTM spline models","title":"A worked out example: Thermoregulation in high elevation lizards","text":"read OTMs data, next step define cubic splines models describe thermal dynamics OTM doy deployment. , can use gen_otm_splines function throne package. step, crucial user input knot_p parameter determine “wiggliness” spline model. Choosing th appropriate knot_p value dependent recording frequency set OTMs thermal properties organism interest . Based thermal properties organism interest (Sceloporus occidentalis), ideally spline model 1 knot every 15 minutes, typical time lizard takes acclimate new temperature. However, OTMs recorded frequency 1 observation / hour. low frequency, want preserve much information thermal fluctuations OTM possible setting knot_p = 1 works fine. obtain spline models, can simply run: returns nested tibble otm_id & doy specific models (column spline):","code":"c_otms_splines <- gen_otm_splines(otm_data = c_otms_data, knot_p = 1) c_otms_splines ## # A tibble: 11,008 × 6 ##    otm_id  year   doy latitude longitude spline     ##    <chr>  <dbl> <dbl>    <dbl>     <dbl> <list>     ##  1 H1      2022   164     39.7     -119. <smth.spl> ##  2 H1      2022   165     39.7     -119. <smth.spl> ##  3 H1      2022   166     39.7     -119. <smth.spl> ##  4 H1      2022   167     39.7     -119. <smth.spl> ##  5 H1      2022   168     39.7     -119. <smth.spl> ##  6 H1      2022   169     39.7     -119. <smth.spl> ##  7 H1      2022   170     39.7     -119. <smth.spl> ##  8 H1      2022   171     39.7     -119. <smth.spl> ##  9 H1      2022   172     39.7     -119. <smth.spl> ## 10 H1      2022   173     39.7     -119. <smth.spl> ## # ℹ 10,998 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"correcting-flight-data","dir":"Articles","previous_headings":"R workflow","what":"Correcting flight data","title":"A worked out example: Thermoregulation in high elevation lizards","text":"Due inherent differences physical properties surface temperature measurements IR camera operative temperature measurements OTM, next step throne package workflow correct data obtained via flights using OTM flights data. achieve , use correct_flighs_data function follows: can visualize effects correction process (Post-correction) respect data original flights (Pre-correction).","code":"c_flights_data_corr <- correct_flights_data(flights_data = c_flights_data, otm_splines = c_otms_splines) # plot the flights pre-correction pre_corr <- c_flights_data %>%    mutate(hour = paste(floor(mod_start/60),\":\", mod_start - floor(mod_start/60) * 60)) %>%    mutate(hour = fct_reorder(hour, mod_start)) %>%   ggplot(aes(x = longitude, y = latitude, fill = ir_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(hour)) +   ggtitle(\"Pre-correction\") +   theme_minimal()  # plot the flights post-correction post_corr <- c_flights_data_corr %>%    mutate(hour = paste(floor(mod_start/60),\":\", mod_start - floor(mod_start/60) * 60)) %>%    mutate(hour = fct_reorder(hour, mod_start)) %>%   ggplot(aes(x = longitude, y = latitude, fill = op_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_grid(cols = vars(hour)) +   ggtitle(\"Post-correction\") +   theme_minimal()    grid.arrange(pre_corr, post_corr, nrow = 2, ncol = 1)"},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"match-flight-to-otm-data","dir":"Articles","previous_headings":"R workflow","what":"Match flight to OTM data","title":"A worked out example: Thermoregulation in high elevation lizards","text":"last step able predict thermal landscapes match thermal dynamics tiles within corrected flights data dynamics given OTM. achieve , can use match_data function throne package. use function, two user-specific inputs needed: coverage_per error_max. first one determines degree coverage across multiple flights tile needs order considered matching process. seen , flights particularly good overlap:  case, can set coverage_per = 1 ensure areas covered across flights considered although, greater number flights recommend setting coverage_per = 0.9. second input (error_max) determines maximum average absolute error tile OTM dynamics specified threshold matching. average absolute difference tile’s thermal dynamics OTM best describes > error_max, tile matched OTM thus considered. case, follow specifications set error_max = 5. Now, can run match_data function follows: result matches tibble OTM best describes dynamics tile site. figure , tile colored according otm_id best represents ’s thermal dynamics. can visualize results matching step shown :  Without need user-specified input, matching process identified topography terrain, assigning different OTMs eastern western facing sides ridge divides site.","code":"c_flights_data_corr %>%    group_by(latitude, longitude) %>%    summarise(coverage_per = 100*(n()/3)) %>%    ggplot(aes(x = longitude, y = latitude)) +   geom_raster(aes(fill = coverage_per)) +   guides(fill = guide_colorbar(title = \"Coverage (%)\")) +   theme_minimal() c_matches <- match_data(flights_data = c_flights_data_corr, otm_splines = c_otms_splines, coverage_per = 1, error_max = 5) c_matches ## # A tibble: 98,363 × 4 ##    latitude longitude otm_id  error ##       <dbl>     <dbl> <chr>   <dbl> ##  1     39.7     -119. NA     NA     ##  2     39.7     -119. H121    0.842 ##  3     39.7     -119. H6      2.17  ##  4     39.7     -119. H16     3.06  ##  5     39.7     -119. H4      1.39  ##  6     39.7     -119. H56     2.44  ##  7     39.7     -119. H78     2.15  ##  8     39.7     -119. H132    2.89  ##  9     39.7     -119. H36     1.86  ## 10     39.7     -119. H6      1.32  ## # ℹ 98,353 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"predicting-thermal-landscapes","dir":"Articles","previous_headings":"R workflow","what":"Predicting thermal landscapes","title":"A worked out example: Thermoregulation in high elevation lizards","text":"Using , can finally predict thermal landscapes site using predict_thermal_landscape function throne package. example, predict thermal landscape every hour 6 (mod = 360) 9 PM (mod = 1260) August 10th (doy = 222). obtain prediction ’d simply run: can visualize follows: panel shows predicted thermal landscape entire site given hour day.","code":"example_prediction <- predict_thermal_landscape(matches = c_matches, otm_splines = c_otms_splines, doy = 222, mod = seq(360,1260, by = 60)) ## [1] \"0.01 % of predictions were removed due to falling outside of the time when OTMs were recording\" example_prediction %>%    filter(!is.na(mod)) %>%   ggplot(aes(x = longitude, y = latitude, fill = pred_op_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_wrap(~mod/60) +   theme_minimal() +   theme(axis.text = element_blank(), axis.title = element_blank())"},{"path":"https://ggcostoya.github.io/throne/articles/example.html","id":"ecological-application-of-the-method","dir":"Articles","previous_headings":"","what":"Ecological application of the method","title":"A worked out example: Thermoregulation in high elevation lizards","text":"obtain prediction thermal landscape can use infer characteristics thermal environments experienced organism interest. example, integrate thermal landscape prediction spatial distribution home ranges 10 individual lizards population interest. mark-recapture example data set use: spatially explicit mark-recapture data set allows us estimate individual’s territory individual-specific minimum convex polygon. can plot individual’s home range top predicted thermal landscape 10 example:  can hen calculate average predicted operative temperature experience individual within home range : NOTE: approximation, detailed (accurate) method estimate individual home ranges please consider checking “Using spatial data R” can visualize average predicted operative temperature experienced individual within home range follows:  seen , individuals experience substantially different thermal environments average, translate hour day?:  Lastly, can consider ecological relevance different conditions experienced individual examining percentage home range falls within preferred temperature (\\(T_{pref}\\)), species falls 30 35 C. can visualize percentage hour day follows: Individuals differ substantially percentage home range falls within preferred temperature range. information can used infer potential impact thermal landscape fitness individual.","code":"lizard_mr ## # A tibble: 36 × 7 ##    id    sex    year   doy   mod latitude longitude ##    <chr> <chr> <int> <dbl> <dbl>    <dbl>     <dbl> ##  1 H005  M      2022   175   720     39.7     -119. ##  2 H005  M      2022   200   767     39.7     -119. ##  3 H005  M      2022   173   678     39.7     -119. ##  4 H005  M      2022   180   720     39.7     -119. ##  5 H009  M      2022   193   704     39.7     -119. ##  6 H009  M      2022   216   630     39.7     -119. ##  7 H009  M      2022   173   753     39.7     -119. ##  8 H009  M      2022   214   784     39.7     -119. ##  9 H020  M      2023   166   765     39.7     -119. ## 10 H020  M      2022   195   774     39.7     -119. ## # ℹ 26 more rows # load necessary package to add a second fill scale library(ggnewscale)  # plotting  ggplot() +   geom_raster(data = example_prediction %>% filter(mod == 10*60),               aes(x = longitude, y = latitude, fill = pred_op_temp)) +   scale_fill_viridis(option = \"magma\") +   new_scale_fill() +   geom_polygon(data = lizard_mr,                aes(x = longitude, y = latitude, fill = id),                alpha = 0.75, col = \"black\", linewidth = 0.5) +   theme_minimal() # holder object example_pred_lizards <- tibble(id = c(), latitude = c(), longitude = c(), mod = c(), pred_op_temp = c())  # get unique lizard id list lizard_list <- unique(lizard_mr$id)  # loop to filter the prediction for each unique lizard's home range for(i in 1:length(lizard_list)){      # select polygon for the lizard   lizard_polygon <- lizard_mr %>% filter(id == lizard_list[i])      # filter thermal landscape for rough home-range for each lizard   rough_home_range <- example_prediction %>%      filter(longitude >= min(lizard_polygon$longitude) & longitude <= max(lizard_polygon$longitude) &              latitude >= min(lizard_polygon$latitude) & latitude <= max(lizard_polygon$latitude)) %>%      mutate(id = lizard_list[i]) %>%      select(id, latitude, longitude, mod, pred_op_temp)      # bind to holder object   example_pred_lizards <- rbind(example_pred_lizards, rough_home_range)    } example_pred_lizards %>%    ggplot(aes(x = pred_op_temp, y = id)) +   stat_summary(aes(col = id), linewidth = 1, size = 1) +   ylab(\"Lizard ID\") + xlab(\"Mean day-time operative temperature within home range (C)\") +   theme_minimal() +   theme(legend.position = \"none\") ## No summary function supplied, defaulting to `mean_se()` example_pred_lizards %>%    ggplot(aes(x = mod/60, y = pred_op_temp)) +   stat_summary(aes(col = id), geom = \"line\", linewidth = 2, alpha = 0.5) +   stat_summary(geom = \"line\", linewidth = 2) +   ylab(\"Mean day-time operative temperature within home range (C)\") +    xlab(\"Hour of the day\") +   theme_minimal() example_pred_lizards %>%    mutate(at_tpref = ifelse(pred_op_temp >= 30 & pred_op_temp <= 35, 1, 0)) %>%   group_by(mod, id) %>% summarise(at_tpref = mean(at_tpref)) %>%    ggplot(aes(x = mod / 60, y = at_tpref * 100)) +   geom_line(aes(col = id), linewidth = 2, alpha = 0.5) +   stat_summary(geom = \"line\", col = \"black\", linewidth = 2) +   ylab(\"% of home range within 30 - 35 C\") +   xlab(\"Hour of the day\") +   theme_minimal()"},{"path":"https://ggcostoya.github.io/throne/articles/otm_setup.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Collecting OTM data","text":"vignette goal present co-first step workflow presented throne package, collection operative temperature model (OTM) data.collect data need 1) build, 2) program, 3) deploy 4) read measurements collected OTM. , provide general guidelines perform steps integrate adequately software developed throne package. context whole package’s workflow, highlight areas covered vignette : Figure 1. Part workflow covered vignette","code":""},{"path":"https://ggcostoya.github.io/throne/articles/otm_setup.html","id":"building-otms","dir":"Articles","previous_headings":"","what":"Building OTMs","title":"Collecting OTM data","text":"Typically, OTM sum two components; body temperature logger contained inside body. physical properties body OTM determine internal temperature turn captured temperature logger. goal building OTM’s body matches biophysical properties organism interest accurately possible temperature measured logger closely matches organism experience exact spot OTM deployed. concept operative temperature. end, recommended body similar volume, mass color organism interest ensure properties conduction convection radiative heat transfer comparable. Many techniques employed years achieve body characteristics. instance, study terrestrial ectotherms (OTMs commonly used), copper pipes historically considered accurate analog many organisms. However, part separate study, showed 3D printing can surpass performance copper pipes fraction cost. strongly recommend 3D printing build OTM bodies detail Alujević et al. 2024. example, picture OTM bodies used study: second component OTM temperature logger. recommend using iButton temperature loggers. study, used thermocron DS1921G-F5# Embedded data systems ~ 50 US Dollars / unit (40 US Dollar / unit ordered bulk). models available similar prices leave user make choice. Nonetheless, choosing iButton model recommend considering: iButton temperature range falls outside typical range temperatures expected area interest. great recording accuracy possible. thermal resolution relevant study. example, iButton can record temperature changes 10 C intervals optimal studying micro climatic variation order C, iButton resolution 0.5 - 1 C might suffice. iButton can store number readings frequency adequate study. Ideally OTMs deployed field longer periods time user need consider trade-logging frequency relevant capture thermal fluctuations environment number readings iButton can store logging frequency.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/otm_setup.html","id":"programming-ibuttons","dir":"Articles","previous_headings":"","what":"Programming iButtons","title":"Collecting OTM data","text":"OTM deployed field, iButton contains must programmed. program iButton 3 things needed, 1) reader able read transfer data iButton, 2) adapter can transmit information reader computer 3) processing software instructions data can inputed retrieved. purposes used DS1402D-DR8 + iButton Reader DS9490B# USB 1-Wire Adapter iButtonlink software OneWireViewer Analog Devices. hardware software used outcome achieved strongly recommend using OneWireViewer software front completely free. spirit, offer short step step tutorial programm iButtons using software also present GIF : Download OneWireViewer. instructional video get started can found . Note software Java-based applet, Java need installed proceeding. Connect adapter reader. Insert iButton reader available USB-port. software launched first time, USB port need selected. Choose USB-port drop-list prompted. Insert iButton reader. iButton working appear device serial number software’s left window panel; iButton show likely unusable malfunctioning. Select iButton list devices left, go “Thermochron” tab. Click “Start new mission” start programming iButton. Check box says “Synchronize Real-time Clock”. make sure iButton’s internal real-time clock synchronized time PC used programming. Enter “Sampling Rate”, minutes. Enter “Mission Start Delay”, time first data sample collected. Note minutes; example, 24h delay recording delay need 1440 minutes. “Enable Rollover” unless want data overwritten memory full. Click “OK”. line reading “Mission Active?” change “False” “True” within second two. also display “First sample yet collected”. Insert iButton inside OTM ensuring air-tight, water-proof seal achieved OTM ready deployed field. Figure 2: Step--step process program iButton using OneWireViewer software NOTE: user figure math related sampling rate dependent iButton’s storing capacity (.e., number readings can hold). Often, need record temperatures long period time minimizes number observations within given day. end, recommend , multiple OTMs deployed, “Mission Start Delay” modified accordingly certain degree staggering measurements record. Say interested recording daily thermal fluctuations period multiple months minimum sampling rate can afford 2h. case recommend splitting OTMs two groups one “Mission Start Delay” 1440 minutes another 1500 eventual recordings staggered 60 minutes.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/otm_setup.html","id":"deploying-otms-in-the-field","dir":"Articles","previous_headings":"","what":"Deploying OTMs in the field","title":"Collecting OTM data","text":"OTMs programmed next step deploy field. general rule recommend deploying maximum number OTMs possible within budget constraints. greater number OTMs enable capture greater number thermal microhabitats crucial subsequent steps throne package. addition, recommend informed opposed random deployment throughout area study minimize degree overlap information provided logger. achieve informed deployment, recommend following: Become familiar area study identify general microhabitats target well daily temperature fluctuations. key point identifying generalorientation study site determine incidence sun. Deploy OTMs evenly across microhabitats surfaces different orientations within site. possible, add replicates number possible replicates limited, favor microhabitats represented area study. example, study area considered pilot methodology throne package slope small outcrop Great Basin Desert. examining environment, considered placing OTMs faces outcrops (rocks > 2m diameter), boulders (1-2 m), rocks (< 1 m), ground inside small bushes adequate representation available micro habitats. Additionally, outcrop relatively rough terrain (see ), generated slopes facing towards cardinal directions (N, NE, E, SE, S, SW & W) intentionally placed OTMs facing perpendicularly towards directions. Figure 3: Elevational profile area study","code":""},{"path":"https://ggcostoya.github.io/throne/articles/otm_setup.html","id":"reading-ibutton-data","dir":"Articles","previous_headings":"","what":"Reading iButton data","title":"Collecting OTM data","text":"last step process recover OTMs field read data collected iButtons. reading process similar programming steps 2-4 . offer yet another small tutorial fully read download data also show GIF (Figure 4): Select iButton software’s left window pane. Navigate “Thermocron” tab, “Temperatures”. reader take second display graph temperatures plotted time. graph shows , right-click anywhere within graph window drop-menu appear. Select “Save Data .csv File” save file directory within computer. Keep track directory direction input subsequent R functions part throne R workflow. NOTE: data remain iButton programmed anew. start new mission, old mission data lost, **strongly(( recommend make sure data correctly downloaded re-deployment. Figure 4 Step--step process read data logged iButton using OneWireViewer software","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"the-aim-of-throne-","dir":"Articles","previous_headings":"","what":"The aim of throne.","title":"An overview of throne","text":"overall aim using throne package obtain spatio-temporally complete prediction thermal landscape area interest. thermal landscape, refer data set includes temperature measurements specified area (.e., set “tiles” described unique latitude longitude) across multiple moments time (.e., years, days way minutes). generate predictions, throne package integrates spatially complete temporally discrete thermal data collected via aerial photogrammetry using thermal imaging drones (hence throne), spatially discrete temporally complete operative temperature data collected via operative temperature models (OTMs). Generating spatio-temporally complete thermal landscapes allows users obtain characterization thermal properties area study unprecedented level detail. example final output throne package, predicted thermal landscape area study across times entire day:","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"the-throne-workflow","dir":"Articles","previous_headings":"","what":"The throne workflow","title":"An overview of throne","text":"diagram entire workflow throne package. essence, entire process divided 8 steps performed processing software R:  steps workflow discussed following sections:","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"collect-process-thermal-images","dir":"Articles","previous_headings":"The throne workflow","what":"1. Collect & process thermal images","title":"An overview of throne","text":"first step collect thermal images using thermal imaging drone. achieve , users need : Acquire thermal imaging drone. Plan conduct flights thermal imaging drone multiple times area interest. Process thermal imagery using photogrammetry software obtain thermal orthomosaic (.e., .TIF file) flight. achieve , included step--step guide perform steps also includes recommendations kind drone photogrammetry software use.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"collect-otm-data","dir":"Articles","previous_headings":"The throne workflow","what":"2. Collect OTM data","title":"An overview of throne","text":"second step collect operative temperature model (OTM) data. elaborate concept short, operative temperature measurement temperature performed inside object (.e., model) zero heat capacity, size, shape radiation properties organism interest. Measuring operative temperatures (opposed air surface temperatures) critical order able accurately characterize thermal environment organism interest actually experiencing. collect operative temperature model data also provide step--step guide goes following steps: Build OTMs Program temperature loggers (.e., iButtons) contained inside OTM. Plan conduct deployment OTMs field. Recover OTMs download stored data .csv files.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"read-process-flight-data","dir":"Articles","previous_headings":"The throne workflow","what":"3. Read & process flight data","title":"An overview of throne","text":"third step reading processing thermal orthomosaics (.TIF files call “flight data” simplicity) data structure can worked R environment. process achieved rnp_flights_data function throne package. vignette discuss detail function works provide insights determine spatial resolution flights data via digits argument.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"read-process-otm-data","dir":"Articles","previous_headings":"The throne workflow","what":"4. Read & process OTM data","title":"An overview of throne","text":"fourth step reading processing data (.csv format) collected OTMs deployed field. achieve , throne package includes rnp_otms_data function capable reading OTM data files regardless formatting. details function works can found .","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"generate-otm-spline-models","dir":"Articles","previous_headings":"The throne workflow","what":"5. Generate OTM spline models","title":"An overview of throne","text":"fifth step generation cubic spline models OTM data , context throne package, performed gen_otm_splines function. short, function fit unique cubic spline model OTM day deployed field way obtain continuous characterization temperature fluctuation. vignette detail function works provide guidelines choose appropriate “wiggliness” resulting model knot_p argument","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"correct-flight-data","dir":"Articles","previous_headings":"The throne workflow","what":"6. Correct flight data","title":"An overview of throne","text":"sixth step correction flights data using newly created spline models using correct_flights_data function. need correction stems fundamental difference physical properties temperature measurements collected using IR thermal imaging camera mounted drone collected using OTMs. goal correction step transform thermal maps obtained flights operative temperature maps. logic process details correct_flights_data function works described extensively vignette","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"match-flight-and-otm-data","dir":"Articles","previous_headings":"The throne workflow","what":"7. Match flight and OTM data","title":"An overview of throne","text":"seventh step throne workflow matching flights OTM data. goal step, can performed using match_data function link thermal dynamics tiles (.e., unique combination latitude longitude values) study area thermal dynamics OTM. details matching process performed can found .","code":""},{"path":"https://ggcostoya.github.io/throne/articles/overview.html","id":"predict-thermal-landscapes","dir":"Articles","previous_headings":"The throne workflow","what":"8. Predict thermal landscapes","title":"An overview of throne","text":"last step prediction thermal landscapes can done using predict_thermal_landscape function. Combining OTM spline models “matches” data sets, predict_thermal_landscape function able produce thermal landscape area interest date time day long OTMs deployed recording field. discuss exact process predict thermal landscapes together insight high predictive accuracy method also discuss accompanying manuscript. start, next introduce field part throne workflow focusing collect thermal imagery using drone. (previous page) Next: Collect process thermal imagery","code":""},{"path":"https://ggcostoya.github.io/throne/articles/predicting_thermal_landscapes.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Predicting Thermal Landscapes","text":"vignette, goal illustrate process behind final step workflow throne package, prediction spatio-temporally complete thermal landscapes. achieve , throne uses two functions: match_data predict_thermal_landscpe. first allows user match thermal dynamics given tile within site (.e., unique latitude longitude) measured across multiple flights operative temperature model (OTM). second, uses matches data set combines information date & OTM specific cubic spline models (obtained using gen_otm_splines) function package predict temperature tile site moment time OTMs deployed field. context overall workflow package, section covered vignette:  Finally, also provide information predictive accuracy method , present accompanying manuscript, high.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/predicting_thermal_landscapes.html","id":"the-match_data-function","dir":"Articles","previous_headings":"","what":"The match_data function","title":"Predicting Thermal Landscapes","text":"match_data function matches thermal dynamics specific tiles (.e., unique latitude longitude combinations) collected across multiple flights thermal dynamics operative temperature model (OTM). , function takes following inputs inherited previous functions : flights_data tibble obtained using rnp_flights_data. strongly recommend tibble undergoes correction using correct_flights_data function order ensure flights_data tibble OTMs operative temperature scale. However, function allow user use uncorrected flights_data tibble choose. otm_splines complex tibble obtained using gen_otm_splines function. Additionally, match_data also requires 2 user specified inputs: coverage_per, numeric value 0 - 1 indicating minimum coverage tile across flights provided order t included matching. need input can easily visualized overlapping area covered multiple flights provided example flights_data (see image ). Due unique conditions 34 flights conducted perform study (e.g., wind etc.), area covered flights variable specially focusing around edges. Nonetheless, foresaw effect ensured area covered flight much larger area interest study, precaution recommend users package follow. goal area OTMs covered flights , seen , OTMs deployed ground (black dots) fell areas covered vast majority flights. general guideline, recommend setting coverage_per >= 0.9  error_max, maximum error temperature measurements tile OTM best represents , develop next. match tiles OTMs best describe thermal dynamics, match_data function goes following general steps: calculates coverage across flights every single tile covered selects tiles bee covered much coverage_per argument specifies. tile, calculate average absolute error temperature measurements tile flight temperature measurements made every OTMs exact time flight took place. Select OTM minimizes error tile’s OTMs measurements. figure illustrate logic approach. black dots indicate temperature measurements associated given tile (note measurements corrected using correct_flights_data function) across flights occurred days year (doy) 236, 237 238. red blue lines indicate temperatures predicted spline model 2 OTMs doy. case, match_data function choose OTM25 better represent dynamics tile average different tile’s temperature measurements estimated cubic spline model OTM much smaller OTM05.  NOTE: distance tile OTM weighted step. OTM necessarily closest tile might actually able represent thermal dynamics much better one closer. example, tile contains tree might represented OTM deployed inside tree 100 m one southern facing slope 2 m away. approach extends even tile OTM deployed. Imagine tile mostly facing south small bush . OTM placed precisely bush, thermal dynamics might representative average dynamics tile OTM placed elsewhere might actually represent tile better. figure show results matching example data set, 5 cases OTM tile best described thermal dynamics.  minimum error certain threshold indicated error_max parameter assign OTM tile. figure show results implementing step areas marked dark blue indicating tiles one OTM best describe without exceeding threshold imposed error_max. also important note “problematic” tiles far area interest study (OTMs, indicated black dots, deployed) area error minimized.  NOTE: figure shades light gray tiles covered least 1 flights covered least 90% flights. seen , high-coverage area much smaller total area covered flights. resulting matches tibble otm_id column indicating OTM best describes given tile (.e., combination o latitude longitude) well column matching error user check desired. rows error > error_max otm_id specified NA. matches data gather interesting findings. Including : OTMs needed explain majority sites thermal dynamics. example data set, 5 33 OTMs deployed needed explain >50% variability site 21 explain >95%.  matching mechanism automatically match tiles given orientation OTMs deployed tile orientation. seen considering site plotted N-S orientation, can, example, OTMs facing W best described tiles western slope .","code":"matches_5 ## # A tibble: 6,386 × 4 ##    latitude longitude otm_id error ##       <dbl>     <dbl> <chr>  <dbl> ##  1     39.9     -120. OTM26   4.29 ##  2     39.9     -120. OTM26   4.40 ##  3     39.9     -120. OTM26   3.32 ##  4     39.9     -120. OTM26   3.15 ##  5     39.9     -120. OTM26   3.36 ##  6     39.9     -120. OTM02   2.73 ##  7     39.9     -120. OTM26   3.18 ##  8     39.9     -120. OTM26   2.96 ##  9     39.9     -120. OTM26   2.94 ## 10     39.9     -120. OTM26   3.54 ## # ℹ 6,376 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/predicting_thermal_landscapes.html","id":"predicting-thermal-landscapes","dir":"Articles","previous_headings":"","what":"Predicting thermal landscapes","title":"Predicting Thermal Landscapes","text":"final step workflow throne package predict thermal landscapes. , thonre package includes function predict_thermal_landscape takes following inherited inputs: otm_splines complex tibble obtained generate_otm_splines. matches tibble associating tiles study area OTMs best describe thermal dynamics obtained using match_data function discussed . addition, predict_thermal_landscape function require new user-specified inputs: day year doy (single multiple) prediction generated. minute day mod (single multiple) doy specified prediction generated. inputs specified, function go following general steps: Filter provided otm_splines splines characterizing OTMs also present matches tibble among select models describing dynamics OTM doy (single multiple) specified argument function. Predict operative temperature specified mod (single multiple) doy OTMs. Merge operative temperature prediction matches tibble obtain predicted operative temperature every single tile considered. Since necessary calculations carried hand (.e., generating spline models, performing matching tiles OTMs etc.) predict_thermal_landscape function relatively fast allows user predict entire thermal landscape site moment OTMs deployed. example, say want obtain complete thermal landscape prediction every hour day doy = 237 (.e., August 24th), one simply run: NOTE: predict_thermal_landscape function able predict thermal landscapes specified time falls outside range OTMs measuring. end, function also provide warning indicating % predictions removing due falling outside range OTMs recording. can plot prediction using regular ggplot tools easily :  plot combined single image using tools gganimate package:  predict_thermal_landscape function unlimited power provide complete thermal landscape predictions unprecedented level detail.","code":"# obtain prediction prediction_237 <- predict_thermal_landscape(matches = matches_20, otm_splines = otms_splines,                                              doy = 237, mod = seq(0,1440, by = 60))  prediction_237 ## # A tibble: 159,650 × 5 ##    latitude longitude   doy   mod pred_op_temp ##       <dbl>     <dbl> <dbl> <dbl>        <dbl> ##  1     39.9     -120.   237  1380         23.0 ##  2     39.9     -120.   237  1320         22.8 ##  3     39.9     -120.   237   900         36.0 ##  4     39.9     -120.   237  1080         32.1 ##  5     39.9     -120.   237  1200         25.9 ##  6     39.9     -120.   237  1440         22.0 ##  7     39.9     -120.   237    60         21.3 ##  8     39.9     -120.   237     0         21.5 ##  9     39.9     -120.   237  1260         24.9 ## 10     39.9     -120.   237   660         34.6 ## # ℹ 159,640 more rows prediction_237 %>%    filter(mod %in% seq(6*60,21*60,by = 60)) %>%   filter(!is.na(mod)) %>%   ggplot(aes(x = longitude, y = latitude, fill = pred_op_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_wrap(~mod/60) +   theme_minimal() +   theme(axis.text = element_blank(), axis.title = element_blank(),         legend.position = \"top\",strip.text = element_text(size = 12)) +   guides(fill = guide_colorbar(title = \"Predicted Operative Temperature (C)\"))"},{"path":"https://ggcostoya.github.io/throne/articles/predicting_thermal_landscapes.html","id":"predictive-accuracy","dir":"Articles","previous_headings":"","what":"Predictive accuracy","title":"Predicting Thermal Landscapes","text":"discuss accompanying manuscript, method highly accurate predicting thermal landscapes. end, performed validation compare predicted operative temperature tiles containing OTMs using predict_thermal_landscape function operative temperatures recorded OTMs actually tiles. average prediction error (.e., pred_op_temp - op_temp) XX.","code":"val_data %>%    filter(knot_p == 1/7.5, n_flights == 34, n_otms == 33) %>%    ggplot(aes(x = pred_op_temp - obs_op_temp)) +    geom_histogram(aes(y = ..density..), fill = \"lightgray\") +   geom_density() +   xlab(\"Prediction error (Predicted - Observed Operative Temp., C)\") +   ylab(\"Density\") +   theme_minimal()"},{"path":"https://ggcostoya.github.io/throne/articles/predict_thermal_landscapes.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Matching flight to OTM data and Predicting Thermal Landscapes","text":"vignette, goal illustrate process behind final step workflow throne package, prediction spatio-temporally complete thermal landscapes. achieve , throne uses two functions: match_data predict_thermal_landscpe. first allows user match thermal dynamics given tile within site (.e., unique latitude longitude) measured across multiple flights operative temperature model (OTM). second, uses matches data set combines information date & OTM specific cubic spline models (obtained using gen_otm_splines function) predict temperature tile area interest moment time OTMs deployed field. context overall workflow package, section covered vignette:","code":""},{"path":"https://ggcostoya.github.io/throne/articles/predict_thermal_landscapes.html","id":"the-match_data-function","dir":"Articles","previous_headings":"","what":"The match_data function","title":"Matching flight to OTM data and Predicting Thermal Landscapes","text":"match_data function matches thermal dynamics specific tiles (.e., unique latitude longitude combinations) collected across multiple flights thermal dynamics operative temperature model (OTM). , function takes following inputs inherited previous functions : flights_data tibble obtained using rnp_flights_data. strongly recommend tibble undergoes correction using correct_flights_data function order ensure flights_data tibble OTMs operative temperature scale. However, function allow user use uncorrected flights_data tibble choose. otm_splines nested tibble obtained using gen_otm_splines function. Additionally, match_data also requires 2 user specified inputs: coverage_per, numeric value 0 - 1 indicating minimum coverage tile across flights provided order included matching process. need input can easily visualized overlapping area covered multiple flights provided example flights_data (see image ). Due unique conditions 34 flights conducted perform study (e.g., wind etc.), area covered flight variable, specially focusing around edges study area. Nonetheless, foresaw effect ensured area covered flight much larger area interest study, precaution recommend users package follow. goal area OTMs covered flights , seen , OTMs deployed ground (black dots) fell areas covered vast majority flights. general guideline, recommend setting coverage_per >= 0.9  error_max, maximum error temperature measurements tile OTM best represents , elaborate . match tiles OTMs best describe thermal dynamics, match_data function goes following general steps: calculates coverage across flights every single tile covered selects tiles bee covered much coverage_per argument specifies. tile, calculate average absolute error temperature measurements tile flight temperature measurements made every OTM exact time flight took place. Select OTM minimizes error tile’s OTMs measurements. figure illustrate logic approach. black dots indicate temperature measurements associated given tile (note measurements corrected using correct_flights_data function) across flights conducted days year (doy) 236, 237 238. red blue lines indicate temperatures predicted spline model 2 OTMs doy. case, match_data function choose OTM25 better represent dynamics tile average difference tile’s temperature measurements estimated cubic spline model OTM25 much smaller OTM05.  NOTE: distance tile OTM weighted step. OTM necessarily closest tile might actually able represent thermal dynamics much better one closer. example, tile contains tree might better represented OTM deployed inside tree 100 m one different facing slope 2 m away. approach extends even tile OTM deployed. Imagine tile mostly facing south small bush . OTM placed precisely inside bush, thermal dynamics might representative average dynamics tile OTM placed elsewhere might actually represent tile better. figure show results matching example data set, 5 cases OTM tile best described thermal dynamics.  minimum error certain threshold indicated error_max parameter assign OTM tile. figure show results implementing step areas marked dark blue indicating tiles OTM describe without exceeding threshold imposed error_max. also important note “problematic” tiles far area interest study (OTMs, indicated black dots, deployed) area error minimized.  NOTE: figure shows tiles covered least 1 flights covered least 90% flights shaded light gray. seen , high-coverage area much smaller total area covered flights. resulting matches tibble otm_id column indicating OTM best describes given tile (.e., combination o latitude longitude) well column matching error user inspect desired. rows error > error_max otm_id specified NA. NOTE: tibble presented generated considering error_max = 5. throne package also includes another matches data set generated error_max = 20 can accessed calling matches_20. matches data gather interesting findings. Including : OTMs needed explain majority sites thermal dynamics. example data set, 5 33 deployed OTMs deployed needed explain 50% thermal variability site.  matching mechanism automatically match tiles given orientation OTMs deployed tile orientation. seen considering site plotted N-S orientation, can, example, see OTMs facing W best described tiles western slope .  NOTE: plot use matches tibble error_max = 20 visualization purposes .","code":"matches_5 ## # A tibble: 6,386 × 4 ##    latitude longitude otm_id error ##       <dbl>     <dbl> <chr>  <dbl> ##  1     39.9     -120. OTM26   4.29 ##  2     39.9     -120. OTM26   4.40 ##  3     39.9     -120. OTM26   3.32 ##  4     39.9     -120. OTM26   3.15 ##  5     39.9     -120. OTM26   3.36 ##  6     39.9     -120. OTM02   2.73 ##  7     39.9     -120. OTM26   3.18 ##  8     39.9     -120. OTM26   2.96 ##  9     39.9     -120. OTM26   2.94 ## 10     39.9     -120. OTM26   3.54 ## # ℹ 6,376 more rows"},{"path":"https://ggcostoya.github.io/throne/articles/predict_thermal_landscapes.html","id":"predicting-thermal-landscapes","dir":"Articles","previous_headings":"","what":"Predicting thermal landscapes","title":"Matching flight to OTM data and Predicting Thermal Landscapes","text":"final step workflow throne package predict thermal landscapes. , thonre package includes function predict_thermal_landscape takes following inherited inputs: otm_splines nested tibble obtained generate_otm_splines. matches tibble associating tiles study area OTMs best describe thermal dynamics obtained using match_data function discussed . addition, predict_thermal_landscape function require following user-specified inputs: day year doy (single multiple) prediction generated. minute day mod (single multiple) doy specified prediction generated. inputs specified, function go following general steps: Filter provided otm_splines splines characterizing OTMs also present matches tibble among select models describing dynamics OTM doy (single multiple) specified argument function. Predict operative temperature specified mod (single multiple) doy OTMs. Merge operative temperature prediction matches tibble obtain predicted operative temperature every single tile considered. Since necessary calculations carried beforehand (.e., generating spline models, performing matching tiles OTMs etc.) predict_thermal_landscape function relatively fast allows user predict entire thermal landscape site moment OTMs deployed. example, say want obtain complete thermal landscape prediction every hour day doy = 237 (.e., August 24th), one simply run: NOTE: predict_thermal_landscape function able predict thermal landscapes specified time falls outside range OTMs logging temperatures. end, function also provide warning indicating % predictions removed due falling outside range OTMs recording. can plot prediction using regular ggplot tools easily :  plot combined single image using tools gganimate package:  predict_thermal_landscape function unlimited power provide complete thermal landscape predictions unprecedented level detail. want see entire throne pipeline action, next present case study exemplifying implement method. Previous: Correct flights data Next: worked example","code":"# obtain prediction prediction_237 <- predict_thermal_landscape(matches = matches_20, otm_splines = otms_splines,                                              doy = 237, mod = seq(0,1440, by = 60))  prediction_237 ## # A tibble: 159,650 × 5 ##    latitude longitude   doy   mod pred_op_temp ##       <dbl>     <dbl> <dbl> <dbl>        <dbl> ##  1     39.9     -120.   237  1380         23.0 ##  2     39.9     -120.   237  1320         22.8 ##  3     39.9     -120.   237   900         36.0 ##  4     39.9     -120.   237  1080         32.1 ##  5     39.9     -120.   237  1200         25.9 ##  6     39.9     -120.   237  1440         22.0 ##  7     39.9     -120.   237    60         21.3 ##  8     39.9     -120.   237     0         21.5 ##  9     39.9     -120.   237  1260         24.9 ## 10     39.9     -120.   237   660         34.6 ## # ℹ 159,640 more rows prediction_237 %>%    filter(mod %in% seq(6*60,21*60,by = 60)) %>%   filter(!is.na(mod)) %>%   ggplot(aes(x = longitude, y = latitude, fill = pred_op_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_wrap(~mod/60) +   theme_minimal() +   theme(axis.text = element_blank(), axis.title = element_blank(),         legend.position = \"top\",strip.text = element_text(size = 12)) +   guides(fill = guide_colorbar(title = \"Predicted Operative Temperature (C)\"))"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flights_data.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Reading and processing flight data","text":"goal vignette illustrate process behind rnp_flights_data (read process flights data) function throne package. function enables processing raw .tif files obtained combining images collected drone flight (see Flying drones obtaining thermal orthomosaics vignette) data frame structure easily manageable R. data frame later related operative temperature model (OTM) data finally predict thermal landscapes. , highlight section package’s workflow covered vignette:  Next, present rnp_flights_data function works, notes choice parameter digits determine spatial resolution final thermal maps.","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flights_data.html","id":"reading-and-processing-flights-data","dir":"Articles","previous_headings":"","what":"Reading and processing flights data","title":"Reading and processing flight data","text":"rnp_flight_data function uses functionality developed package raster transform .tif file tibble (similar data.frame R). detail functions inputs, processing output. rnp_flights_data takes 3 inputs: path directory thermal orthomosaics (.e., .tif files) flights stored. function process files stored folder. many /file considerable size, take substantial amount time run. Luckily, need ran . tibble data.frame metadata flight. metadata file must contain columns flight_id, date flight took place (MM/DD/YYYY format), time day flight started ended (time_start & time_end columns HH:MM format). example metadata tibble include part documentation throne package: number decimal digits final output summarized . Specifying parameter correctly user’s research purpose crucial, dictate spatial resolution tiles eventual thermal landscape. Since believe absolutely critical issue, include section discussing choice . transform original .tif files, rnp_flights_data function goes following general steps: Read specified .tif file raster object using raster function raster package. Re-project coordinates raster Universal Transverse Mercator(UTM) coordinate system easy interpret World Geodetic System(WGS84) coordinate system (.e., system based UTM zones widely used decimal latitude longitude degrees), using projectRaster function also raster package. Transform raster data.frame via rasterToPoints function raster package. resulting data.frame columns longitude, latitude ir_temp latter surface temperature measured drone. output data.frame many rows combinations unique longitude latitude values initial .tif file . combination corresponds “tile” within site study area Round number decimal digits tiles according digits argument. Average surface temperature across tiles rounded latitude longitude. Add metadata corresponding flight final output. Simultaneously, date, time_start time_end columns metadata file transformed columns year, day year (doy), minute day (mod) flight started (mod_start) ended (mod_end). NOTE: choose working doy mod simplify management data much possible. Date time data unique data formats R environment often difficult handle users can lead unintended errors. using doy mod, user deals integer columns, much easier operate . , formats can easily transformed back easily interpretable temporal scales visualization purposes, using .Date function transform doy (also known Julian date) back YYYY-MM-DD format dividing 60 mod get hours. final output tibble object columns longitude, latitude IR-measured temperature (ir_temp). number rows data set vary depending number flights processed simultaneously, based area covered flight number digits specified. instance, study area ~ 2900 \\(m^2\\), setting digits = 5 led tibble ~7500 observations per flight representing “tile” approximately 0.4 \\(m^2\\) latitude approximately 40° (see details choice digits argument . raw .tif file processed, resulting tibble can already used quantify thermal characteristics study site spatially discrete perspective. illustrate , plot 4 34 fully processed flights (digits = 5) area offer throne package example data. Panel titles indicate hour flight took place  data elevation profile site can also use tools plotly package plot data resulting flight 3 dimensions. site doy = 236 mod = 515 (.e., August 25th 2024 8:35 ). Figure 3: Elevational profile area study","code":"## # A tibble: 34 × 4 ##    flight_id date      time_start time_end ##    <chr>     <chr>     <chr>      <chr>    ##  1 flight01  8/24/2023 8:35       8:39     ##  2 flight02  8/24/2023 8:59       9:03     ##  3 flight03  8/24/2023 9:19       9:23     ##  4 flight04  8/24/2023 9:42       9:46     ##  5 flight05  8/24/2023 10:06      10:10    ##  6 flight06  8/24/2023 10:38      10:42    ##  7 flight07  8/24/2023 10:57      11:01    ##  8 flight08  8/24/2023 11:20      11:24    ##  9 flight09  8/24/2023 11:40      11:44    ## 10 flight10  8/24/2023 12:00      12:04    ## # ℹ 24 more rows ## # A tibble: 263,008 × 7 ##    longitude latitude ir_temp  year   doy mod_start mod_end ##        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> ##  1     -120.     39.9    12.5  2023   236       515     519 ##  2     -120.     39.9    14.4  2023   236       515     519 ##  3     -120.     39.9    14.0  2023   236       515     519 ##  4     -120.     39.9    13.7  2023   236       515     519 ##  5     -120.     39.9    14.6  2023   236       515     519 ##  6     -120.     39.9    15.3  2023   236       515     519 ##  7     -120.     39.9    14.5  2023   236       515     519 ##  8     -120.     39.9    14.5  2023   236       515     519 ##  9     -120.     39.9    13.9  2023   236       515     519 ## 10     -120.     39.9    13.9  2023   236       515     519 ## # ℹ 262,998 more rows flights_data %>%    filter(mod_start %in% c(515, 700, 900, 1026)) %>%   mutate(hour = round(mod_start/60)) %>%   mutate(hour = paste(hour,\":00 h\", sep = \"\")) %>%   ggplot(aes(x = longitude, y = latitude, fill = ir_temp)) +   geom_raster() +   scale_fill_viridis(option = \"magma\") +   facet_wrap(~ fct_reorder(hour, mod_start)) +   xlab(\"Longitude\") + ylab(\"Latitude\") +   theme_minimal() +   theme(panel.border = element_rect(fill = NA),         axis.ticks = element_line(),         panel.grid.minor = element_blank(),          strip.background = element_rect(fill = \"lightgray\"),         legend.position = \"top\") +   guides(fill = guide_colorbar(\"Reflected temperature (°C)\")) # filter flight data flight <- flights_data %>% filter(mod_start == 515)  # merge flight with elevation data flight_elev <- merge(elevation, flight, by = c(\"latitude\", \"longitude\"))  # prepare rasters raster_elev <- raster::rasterFromXYZ(flight_elev %>% dplyr::select(longitude, latitude, elevation)) raster_temp <- raster::rasterFromXYZ(flight_elev %>% dplyr::select(longitude, latitude, ir_temp))  # prepare plot data Latitude <- seq(max(flight$latitude), min(flight$latitude), length.out = length(unique(flight$latitude))) Longitude <- seq(min(flight$longitude), max(flight$longitude), length.out = length(unique(flight$longitude))) Elevation <- raster::as.matrix(raster_elev) Temp <- raster::as.matrix(raster_temp)  # plot plot_ly(x = ~Longitude, y = ~Latitude, z = ~Elevation) %>%   add_surface(surfacecolor = ~Temp,                colors = magma(n = length(unique(flight$ir_temp))),               colorbar = list(title = \"Surface Temp. (C)\"),               contours = list(z = list(show = TRUE,                                        start = min(elevation$elevation),                                        end = max(elevation$elevation), size = 2))) %>%   layout(scene = list(aspectratio = list(x = 0.76, y = 1, z = 0.36)))"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_flights_data.html","id":"choosing-the-appropriate-digits","dir":"Articles","previous_headings":"","what":"Choosing the appropriate digits","title":"Reading and processing flight data","text":"argument digits determines number decimal digit places latitude longitude information rounded . argument therefore determine spatial resolution final measurement different latitude longitude decimal digits correspond different distances. generalization, 1 degree latitude can approximated 111.32 km, relationship can extended decimal digits seen .  contrast, due curvature Earth distance represented longitude degree also dependent latitude. can find information transform degrees longitude distances . Furthermore, proxistat Rpackage provides helpful functions transform coordinate systems measurable distances. use proxistat functions illustrate latitude influences distance represented longitudinal degree.  Based , majority cases, recommend setting argument digits = 5. provide spatial resolution ~ 1.2 \\(m^2\\) equator gradually descend little ~ 0.5 \\(m^2\\) 66° Latitude seen .  spatial resolution guarantees original .tif file processed scale relevant majority study organisms package intended. However, leave decision user consider spatial scale relevant organism. image illustrate flight processed argument digits set 4, 5 6 respectively. Figure 1. Part workflow covered vignette Next, present throne package can read process OTM data generate OTM date specific spline models. Previous: Collect OTM data Next: Read process OTM data Generate OTM splines","code":"## Warning: A numeric `legend.position` argument in `theme()` was deprecated in ggplot2 ## 3.5.0. ## ℹ Please use the `legend.position.inside` argument of `theme()` instead. ## This warning is displayed once every 8 hours. ## Call `lifecycle::last_lifecycle_warnings()` to see where this warning was ## generated."},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otms_data_gen_otm_splines.html","id":"overview","dir":"Articles","previous_headings":"","what":"Overview","title":"Reading and processing OTM data and Generating OTM spline models","text":"goal vignette illustrate process behind rnp_otms_data (read process OTMs data) gen_otm_splines (generate OTM spline models) function throne package. first function allows user read one multiple raw .csv (see “Collecting OTM data vignette”) temperature measurements recorded temperature logger inside operative temperature model (OTM) data.frame-like structure R. second function takes processed OTM data generates OTM & day year (doy) specific cubic spline model describes thermal dynamics unique OTM day. spline models later used correct flights data ultimately predict thermal landscapes. , highlight section package’s workflow covered vignette:","code":""},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otms_data_gen_otm_splines.html","id":"reading-and-processing-otm-data","dir":"Articles","previous_headings":"","what":"Reading and processing OTM data","title":"Reading and processing OTM data and Generating OTM spline models","text":"rnp_otms_data function reads database .csv files, manipulates ultimately combines large data-frame-like structure R, tibble. , function takes following inputs: path, directory one multiple .csv files stored. .csv files assumed least: column operative temperature measurements. Since different temperature logger processing software structure outputs differently resulting .csv file, require user specify column OTM measurements can found op_temp_col argument function. case, used OneWire Viewer returns operative temperature 3rd column. column dates. operative temperature values, also require user specify date_col .csv files. OneWireViewer returns date first column MM/DD/YY HH:MM:SS /PM format. default dates times extracted column software return date time separate columns. case, user can specify time_col argument function. OTM metadata data.frame tibble containing information related specific OTM (identified unique otm_id). user can include metadata OTM require otm_id column present strongly recommend metadata also contains columns latitude longitude OTM deployed. example metadata tibble can found throne package also incorporate information microhabitat, orientation elevation OTM deployed. TIP: recommend users throne package become familiar formatting .csv contain OTM data. software options resulting .csv file contain several rows metadata might lead incorrect reading file (see example ). rnp_otms_data provide warnings also recommend users specify many rows skipped reading .csv file via rows_skip Specifying rows_skip argument correctly crucial rest package’s functions work properly line. transform raw .csv data tibble, rnp_otm_data function go following general steps: Read .csv file skipping many rows specified within rows_skip argument. Select columns time operative temperature specified date_col (/time_col) op_temp_col arguments. Using tools lubridate package, extract year, day year (doy) minute day (mod) operative temperature measurement (op_temp) made. NOTE: choose working doy mod simplify management data much possible. Date time data unique data formats R environment often difficult handle might lead unintended errors. using doy mod, deal integer columns, much easier operate manipulate. , formats can easily transformed back easily interpretable scales visualization purposes, using .Date function transform doy (also known Julian date) back YYYY-MM-DD format dividing 60 mod get hours. Merge processed data OTM corresponding metadata , one file specified, bind outputs together. final output tibble object look like : row tibble correspond unique operative temperature (op_temp) measurement given otm_id given year, doy mod. example data set contains measurements 33 OTMs 4 days recording rate 720 observations / day (30 observations / h, 0.5 observations / min).","code":"##            Date.Time Unit Value ## 1 8/24/23 6:04:00 AM    C    14 ## 2 8/24/23 6:06:00 AM    C    14 ## 3 8/24/23 6:08:00 AM    C    14 ## 4 8/24/23 6:10:00 AM    C    14 ## 5 8/24/23 6:12:00 AM    C    14 ## 6 8/24/23 6:14:00 AM    C    14 otms_metadata ## # A tibble: 36 × 6 ##    otm_id microhabitat orientation latitude longitude elevation ##    <chr>  <chr>        <chr>          <dbl>     <dbl>     <dbl> ##  1 OTM01  outcrop      N               39.9     -120.     1312. ##  2 OTM21  outcrop      NW              39.9     -120.     1312. ##  3 OTM07  outcrop      E               39.9     -120.     1312. ##  4 OTM16  outcrop      SE              39.9     -120.     1313. ##  5 OTM17  outcrop      Flat            39.9     -120.     1311. ##  6 OTM28  rock         Flat            39.9     -120.     1313. ##  7 OTM13  rock         S               39.9     -120.     1314. ##  8 OTM37  boulder      W               39.9     -120.     1314. ##  9 OTM33  boulder      Flat            39.9     -120.     1314. ## 10 OTM24  rock         E               39.9     -120.     1314. ## # ℹ 26 more rows ##                X1.Wire.iButton.Part.Number..DS1921G.F5 ## 1 1-Wire/iButton Registration Number: 3300000059DFE621 ## 2                             Is Mission Active?  true ## 3         Mission Start:  Thu Aug 24 06:04:00 PDT 2023 ## 4                      Sample Rate:  Every 2 minute(s) ## 5                    Number of Mission Samples:  18947 ## 6                                Total Samples:  89897 ## # A tibble: 67,584 × 10 ##    otm_id  year   doy   mod op_temp microhabitat orientation latitude longitude ##    <chr>  <dbl> <dbl> <dbl>   <dbl> <chr>        <chr>          <dbl>     <dbl> ##  1 OTM01   2023   236   367    13.5 outcrop      N               39.9     -120. ##  2 OTM01   2023   236   369    13.5 outcrop      N               39.9     -120. ##  3 OTM01   2023   236   371    13.5 outcrop      N               39.9     -120. ##  4 OTM01   2023   236   373    13.5 outcrop      N               39.9     -120. ##  5 OTM01   2023   236   375    13.5 outcrop      N               39.9     -120. ##  6 OTM01   2023   236   377    13.5 outcrop      N               39.9     -120. ##  7 OTM01   2023   236   379    13.5 outcrop      N               39.9     -120. ##  8 OTM01   2023   236   381    13.5 outcrop      N               39.9     -120. ##  9 OTM01   2023   236   383    13.5 outcrop      N               39.9     -120. ## 10 OTM01   2023   236   385    13.5 outcrop      N               39.9     -120. ## # ℹ 67,574 more rows ## # ℹ 1 more variable: elevation <dbl>"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otms_data_gen_otm_splines.html","id":"generating-otm-cubic-spline-models","dir":"Articles","previous_headings":"","what":"Generating OTM cubic spline models","title":"Reading and processing OTM data and Generating OTM spline models","text":"OTM data read processed, next step fit cubic smoothing spline model individual OTM doy ’s deployment field. spline model capture thermal dynamics OTM throughout given doy allowing us build prediction operative temperature experienced OTM moment doy based measurements recorded. fit models throne package includes gen_otm_splines function takes input data generated via previously presented rnp_otms_data function user-specified parameter knot_l. function return nested tibble includes OTM identification (otm_id) associated metadata, together nested column containing spline model generated via native R function smooth.spline. resulting splines tibble contain many rows combinations unique otm_id doy since spline model OTM every day deployed field:","code":"## # A tibble: 132 × 9 ##    otm_id  year   doy microhabitat orientation latitude longitude elevation ##    <chr>  <dbl> <dbl> <chr>        <chr>          <dbl>     <dbl>     <dbl> ##  1 OTM01   2023   236 outcrop      N               39.9     -120.     1312. ##  2 OTM01   2023   237 outcrop      N               39.9     -120.     1312. ##  3 OTM01   2023   238 outcrop      N               39.9     -120.     1312. ##  4 OTM01   2023   239 outcrop      N               39.9     -120.     1312. ##  5 OTM02   2023   236 outcrop      W               39.9     -120.     1313. ##  6 OTM02   2023   237 outcrop      W               39.9     -120.     1313. ##  7 OTM02   2023   238 outcrop      W               39.9     -120.     1313. ##  8 OTM02   2023   239 outcrop      W               39.9     -120.     1313. ##  9 OTM03   2023   236 rock         W               39.9     -120.     1317. ## 10 OTM03   2023   237 rock         W               39.9     -120.     1317. ## # ℹ 122 more rows ## # ℹ 1 more variable: spline <list>"},{"path":"https://ggcostoya.github.io/throne/articles/rnp_otms_data_gen_otm_splines.html","id":"choosing-the-appropriate-knot_p-value","dir":"Articles","previous_headings":"","what":"Choosing the appropriate knot_p value","title":"Reading and processing OTM data and Generating OTM spline models","text":"critical point gen_otm_splines function work correctly determining appropriate value knot_p argument. argument determines percentage observations recorded OTM given day used determine number knots smoothing spline model. put simply, number knots ultimately determine degrees freedom model \\(df = degree + k\\) \\(degree = 3\\) cubic splines (see details). number degrees freedom determine “wiggliness” resulting model, .e. number times resulting curve change direction. example, plot different spline models data using different knot_p parameter values.  accompanying paper, discuss factors consider choosing appropriate knot_p value: second important consideration appropriate smoothing factor (.e., number knots per hour; Figure S8) generate daily thermal profiles OTM. decision depends two factors: frequency OTMs recorded operative temperatures biophysical ecology study organism. essential capture accurate thermal profiles specific microsites, excessive precision profiles introduce noise irrelevant study organism might negatively impact quality match thermal dynamics OTMs tiles drone data. counts “excessive precision” system dependent. example, environment abrupt changes weather (e.g., gusts wind, brief cloud cover etc.) result rapid reversible shifts temperature unlikely influence behavior organism due thermal inertia, smoothing improves quality final estimated thermal landscape. case focal population western fence lizard therefore opted use 4 knots per hour smoothed OTM measurements 15-minute intervals. mentioned , first factor consider frequency OTM recording. can extrapolate many knots/day (knots/h) get based frequency recordings knot_p value according formula: \\[ Knot/h = Recordings/h \\cdot knot_p\\] instance, OTMs used validate methodology programmed record temperature measurement every 2 minutes, leading total 30 observations / hour. Assuming knot_p = 0.1 indicate model 3 knots / h. general recommendation, recommend setting knot_p higher value frequency observations low, decision ultimately comes user methodology. Please reach garciacosto@gmail.com recommendations. second issue determines value knot_p study organism. Generally, OTMs equilibrate environmental temperature much faster organism represent difference equilibration time positively correlated mass organism due thermal inertia. words, body temperature organism lot thermal inertia exactly OTM. case, recommend understanding thermal properties organism interest choosing appropriate knot_p value pilot study. shown read process flights OTM data next step correct flights data trasnform surface temperature operative temperature temperature measurements. Previous: Read process flights data Next: Correct flights data","code":""},{"path":"https://ggcostoya.github.io/throne/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Karla Alujević. Author. Guillermo Garcia-Costoya. Author, maintainer. Noa Ratia. Author. Emma Schmitz. Author. Russell D. Godkin. Author. Jelena Bujan. Author. Akhila C. Gopal. Author. Michael Logan. Author.","code":""},{"path":"https://ggcostoya.github.io/throne/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Alujević K, Garcia-Costoya G, Ratia N, Schmitz E, Godkin R, Bujan J, Gopal , Logan M (2024). throne: Predicting thermal landscapes spatio-temporally unprecedented detail. R package version 1.0, https://ggcostoya.github.io/throne/.","code":"@Manual{,   title = {throne: Predicting thermal landscapes in spatio-temporally unprecedented detail},   author = {Karla Alujević and Guillermo Garcia-Costoya and Noa Ratia and Emma Schmitz and Russell D. Godkin and Jelena Bujan and Akhila C. Gopal and Michael Logan},   year = {2024},   note = {R package version 1.0},   url = {https://ggcostoya.github.io/throne/}, }"},{"path":"https://ggcostoya.github.io/throne/index.html","id":"throne-using-aerial-thermography-to-map-terrestrial-thermal-environments-in-unprecedented-detail-","dir":"","previous_headings":"","what":"Predicting thermal landscapes in spatio-temporally unprecedented detail","title":"Predicting thermal landscapes in spatio-temporally unprecedented detail","text":"Accurately quantifying mapping thermal environments crucial predict environmental change going impact organisms. However, describing thermal environments challenging 1) mismatch resolution available data scale organisms experience thermal variation, 2) available tools can pose challenge inexperienced users. , present throne package, provides tools combine spatially discrete temporally complete measurements temperature loggers spatially complete temporally discrete thermal maps obtained via IR drone photogrammetry produce spatio-temporally complete thermal landscapes.","code":""},{"path":"https://ggcostoya.github.io/throne/index.html","id":"getting-started","dir":"","previous_headings":"","what":"Getting started","title":"Predicting thermal landscapes in spatio-temporally unprecedented detail","text":"package currently development yet available CRAN, can dowloaded directly GitHub via: overview throne works please visit page","code":"devtools::install_github(\"ggcostoya/throne\")"},{"path":"https://ggcostoya.github.io/throne/index.html","id":"how-to-cite-the-package","dir":"","previous_headings":"","what":"How to cite the package","title":"Predicting thermal landscapes in spatio-temporally unprecedented detail","text":"package accompanies manuscript currently review Methods Ecology & Evolution. use throne research, please cite package : Alujević K, Garcia-Costoya G, Ratia N, Schmitz E, Godkin R, Bujan J, Gopal , Logan M (2024). throne: Predicting thermal landscapes spatio-temporally unprecedented detail. R package version 1.0, https://ggcostoya.github.io/throne/.","code":""},{"path":"https://ggcostoya.github.io/throne/index.html","id":"contact","dir":"","previous_headings":"","what":"Contact","title":"Predicting thermal landscapes in spatio-temporally unprecedented detail","text":"questions, suggestions, bug reports, please open issue GitHub contact Guillermo Garcia Costoya","code":""},{"path":"https://ggcostoya.github.io/throne/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2024 throne authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/bad_read_otm.html","id":null,"dir":"Reference","previous_headings":"","what":"OTM raw data file read incorrectly — bad_read_otm","title":"OTM raw data file read incorrectly — bad_read_otm","text":"Example used vignettes package illustrate happens raw OTM file read incorrectly.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/bad_read_otm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OTM raw data file read incorrectly — bad_read_otm","text":"","code":"bad_read_otm"},{"path":"https://ggcostoya.github.io/throne/reference/bad_read_otm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OTM raw data file read incorrectly — bad_read_otm","text":"object class data.frame 6159 rows 1 columns.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/bad_read_otm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OTM raw data file read incorrectly — bad_read_otm","text":"","code":"head(bad_read_otm) #>                X1.Wire.iButton.Part.Number..DS1921G.F5 #> 1 1-Wire/iButton Registration Number: 3300000059DFE621 #> 2                             Is Mission Active?  true #> 3         Mission Start:  Thu Aug 24 06:04:00 PDT 2023 #> 4                      Sample Rate:  Every 2 minute(s) #> 5                    Number of Mission Samples:  18947 #> 6                                Total Samples:  89897"},{"path":"https://ggcostoya.github.io/throne/reference/correction_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Correction data set for documentation — correction_data","title":"Correction data set for documentation — correction_data","text":"tibble comparison surface temperatures recorded flights tiles OTM deployed operative temperatures recorded OTMs exact period flights taking place","code":""},{"path":"https://ggcostoya.github.io/throne/reference/correction_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correction data set for documentation — correction_data","text":"","code":"correction_data"},{"path":"https://ggcostoya.github.io/throne/reference/correction_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Correction data set for documentation — correction_data","text":"tibble 1114 rows 8 columns: latitude numeric column indicating latitude tile longitude numeric column indicating longitude tile year numeric columnindicating year flight took place doy numeric column indicating day year flight took place mod_start numeric column indicating minute day flight started mod_end numeric column indicating minute day flight ended ir_temp numeric column indicating average surface temperature recorded tile given flight op_temp numeric column indicating average operative temperature recorded OTMs tile","code":""},{"path":"https://ggcostoya.github.io/throne/reference/correction_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Correction data set for documentation — correction_data","text":"","code":"correction_data #> # A tibble: 1,114 × 8 #>    latitude longitude  year   doy mod_start mod_end ir_temp op_temp #>       <dbl>     <dbl> <dbl> <dbl>     <dbl>   <dbl>   <dbl>   <dbl> #>  1     39.9     -120.  2023   236       515     519    25.4    30.0 #>  2     39.9     -120.  2023   236       515     519    20.5    26.8 #>  3     39.9     -120.  2023   236       515     519    27.8    30.3 #>  4     39.9     -120.  2023   236       515     519    21.3    28.3 #>  5     39.9     -120.  2023   236       515     519    28.0    33.8 #>  6     39.9     -120.  2023   236       515     519    20.4    19.7 #>  7     39.9     -120.  2023   236       515     519    19.1    21.3 #>  8     39.9     -120.  2023   236       515     519    22.9    28.5 #>  9     39.9     -120.  2023   236       515     519    22.1    28.2 #> 10     39.9     -120.  2023   236       515     519    19.9    30.5 #> # ℹ 1,104 more rows"},{"path":"https://ggcostoya.github.io/throne/reference/correct_flights_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Correct flights data — correct_flights_data","title":"Correct flights data — correct_flights_data","text":"Correct flights data transform IR-measured temperatures operative temperatures","code":""},{"path":"https://ggcostoya.github.io/throne/reference/correct_flights_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Correct flights data — correct_flights_data","text":"","code":"correct_flights_data(flights_data, otm_splines)"},{"path":"https://ggcostoya.github.io/throne/reference/correct_flights_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Correct flights data — correct_flights_data","text":"flights_data tibble flights data obtained rnp_flights_data function. tibble must contain columns `longitude` `latitude`. otm_splines nested tibble obtained using gen_otm_splines function. tibble must contain columns longitude latitude values must also flights_data","code":""},{"path":"https://ggcostoya.github.io/throne/reference/correct_flights_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Correct flights data — correct_flights_data","text":"processed flights_data  tibble IR-measured temperatures (ir_temp)    corrected operative temperatures (op_temp).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/elevation.html","id":null,"dir":"Reference","previous_headings":"","what":"Elevation profile of the area where we conducted the project at a spatial\r\nresolution of ~ 1m^2 — elevation","title":"Elevation profile of the area where we conducted the project at a spatial\r\nresolution of ~ 1m^2 — elevation","text":"Elevation profile area conducted project spatial resolution ~ 1m^2","code":""},{"path":"https://ggcostoya.github.io/throne/reference/elevation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Elevation profile of the area where we conducted the project at a spatial\r\nresolution of ~ 1m^2 — elevation","text":"","code":"elevation"},{"path":"https://ggcostoya.github.io/throne/reference/elevation.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Elevation profile of the area where we conducted the project at a spatial\r\nresolution of ~ 1m^2 — elevation","text":"tibble 8170 rows 3 columns, numeric: longitude Longitude decimal degrees latitude Latitude decimal degrees elevation Elevation meters","code":""},{"path":"https://ggcostoya.github.io/throne/reference/elevation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Elevation profile of the area where we conducted the project at a spatial\r\nresolution of ~ 1m^2 — elevation","text":"","code":"elevation #> # A tibble: 8,170 × 3 #>    latitude longitude elevation #>       <dbl>     <dbl>     <dbl> #>  1     39.9     -120.     1243. #>  2     39.9     -120.     1243. #>  3     39.9     -120.     1243. #>  4     39.9     -120.     1244. #>  5     39.9     -120.     1244. #>  6     39.9     -120.     1244. #>  7     39.9     -120.     1244. #>  8     39.9     -120.     1244. #>  9     39.9     -120.     1245. #> 10     39.9     -120.     1245. #> # ℹ 8,160 more rows"},{"path":"https://ggcostoya.github.io/throne/reference/flights_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example flights data — flights_data","title":"Example flights data — flights_data","text":"data set 33 flights processed rnp_flights_data function row data represents surface temperature measured recorded given tile (.e., unique latitude longitude combination) moment time flight took place (specified unique year, day year minute day).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/flights_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example flights data — flights_data","text":"","code":"flights_data"},{"path":"https://ggcostoya.github.io/throne/reference/flights_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example flights data — flights_data","text":"tibble 263008 rows 7 columns, numeric: longitude Longitude given tile decimal degrees latitude Latitude given tile decimal degrees ir_temp Surface temperature measured via IR camera year Year flight took place doy Day year flight took place mod_start Minute day flight started mod_end Minute day flight ended","code":""},{"path":"https://ggcostoya.github.io/throne/reference/flights_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example flights data — flights_data","text":"","code":"flights_data #> # A tibble: 263,008 × 7 #>    longitude latitude ir_temp  year   doy mod_start mod_end #>        <dbl>    <dbl>   <dbl> <dbl> <dbl>     <dbl>   <dbl> #>  1     -120.     39.9    12.5  2023   236       515     519 #>  2     -120.     39.9    14.4  2023   236       515     519 #>  3     -120.     39.9    14.0  2023   236       515     519 #>  4     -120.     39.9    13.7  2023   236       515     519 #>  5     -120.     39.9    14.6  2023   236       515     519 #>  6     -120.     39.9    15.3  2023   236       515     519 #>  7     -120.     39.9    14.5  2023   236       515     519 #>  8     -120.     39.9    14.5  2023   236       515     519 #>  9     -120.     39.9    13.9  2023   236       515     519 #> 10     -120.     39.9    13.9  2023   236       515     519 #> # ℹ 262,998 more rows"},{"path":"https://ggcostoya.github.io/throne/reference/flights_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for example flights — flights_metadata","title":"Metadata for example flights — flights_metadata","text":"Metadata example flights","code":""},{"path":"https://ggcostoya.github.io/throne/reference/flights_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for example flights — flights_metadata","text":"","code":"flights_metadata"},{"path":"https://ggcostoya.github.io/throne/reference/flights_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metadata for example flights — flights_metadata","text":"data frame 34 rows 4 columns: flight_id Character column unique identifier flight date Character column date flight took place DD/MM/YYYY format time_start Character column time flight started HH:MM format time_end Character column time flight ended HH:MM format","code":""},{"path":"https://ggcostoya.github.io/throne/reference/flights_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for example flights — flights_metadata","text":"","code":"tibble::as_tibble(flights_metadata) #> # A tibble: 34 × 4 #>    flight_id date      time_start time_end #>    <chr>     <chr>     <chr>      <chr>    #>  1 flight01  8/24/2023 8:35       8:39     #>  2 flight02  8/24/2023 8:59       9:03     #>  3 flight03  8/24/2023 9:19       9:23     #>  4 flight04  8/24/2023 9:42       9:46     #>  5 flight05  8/24/2023 10:06      10:10    #>  6 flight06  8/24/2023 10:38      10:42    #>  7 flight07  8/24/2023 10:57      11:01    #>  8 flight08  8/24/2023 11:20      11:24    #>  9 flight09  8/24/2023 11:40      11:44    #> 10 flight10  8/24/2023 12:00      12:04    #> # ℹ 24 more rows"},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate OTM splines — gen_otm_splines","title":"Generate OTM splines — gen_otm_splines","text":"Generate unique spline model OTM date (Julian) OTM measuring","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate OTM splines — gen_otm_splines","text":"","code":"gen_otm_splines(otm_data, knot_p)"},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate OTM splines — gen_otm_splines","text":"otm_data OTM data tibble obtained via function rnp_otms_data. must include columns describing OTM id (otm_id), day year (doy), minute day (mod) operative temperature measurement (op_temp) made. function can run without latitude longitude columns, including necessary correct_flights_data, match_data predict_thermal_landscape functions. knot_p number knots spline model describe temperature dynamics OTM given day taken percentage total number operative measurements given day.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate OTM splines — gen_otm_splines","text":"complex tibble columns otm_id, year, doy spline.    spline column nested contains OTM, year DOY smooth.spline model    specified number knots.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/gen_otm_splines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate OTM splines — gen_otm_splines","text":"","code":"library(ggplot2) `%>%` <- magrittr::`%>%`  # filter data for a specific OTM in a given doy otm <- otms_data %>% dplyr::filter(get(\"otm_id\") == \"OTM12\") %>%   dplyr::filter(get(\"doy\") == 237)  # generate the spline model otm_spline <- gen_otm_splines(otm_data = otm, knot_p = 1/7.5)  # obtain a prediction pred <- tibble::tibble(mod = seq(0,1440,by = 1), op_temp = predict(otm_spline$spline[[1]], seq(0,1440,by = 1))$y)  # plotting ggplot2::ggplot() +   ggplot2::geom_point(data = otm, ggplot2::aes(x = mod, y = op_temp), size = 4, alpha = 0.1) +   ggplot2::geom_line(data = pred, ggplot2::aes(x = mod, y = op_temp), linewidth = 2, col = \"red\") +   ggplot2::xlab(\"Minute of the day (MOD)\") +   ggplot2::ylab(\"Operative Temperature (C)\")"},{"path":"https://ggcostoya.github.io/throne/reference/good_read_otm.html","id":null,"dir":"Reference","previous_headings":"","what":"OTM raw data file read correctly — good_read_otm","title":"OTM raw data file read correctly — good_read_otm","text":"Example used vignettes package illustrate happens raw OTM file read correctly","code":""},{"path":"https://ggcostoya.github.io/throne/reference/good_read_otm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"OTM raw data file read correctly — good_read_otm","text":"","code":"good_read_otm"},{"path":"https://ggcostoya.github.io/throne/reference/good_read_otm.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"OTM raw data file read correctly — good_read_otm","text":"object class data.frame 2048 rows 3 columns.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/good_read_otm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"OTM raw data file read correctly — good_read_otm","text":"","code":"head(good_read_otm) #>            Date.Time Unit Value #> 1 8/24/23 6:04:00 AM    C    14 #> 2 8/24/23 6:06:00 AM    C    14 #> 3 8/24/23 6:08:00 AM    C    14 #> 4 8/24/23 6:10:00 AM    C    14 #> 5 8/24/23 6:12:00 AM    C    14 #> 6 8/24/23 6:14:00 AM    C    14"},{"path":"https://ggcostoya.github.io/throne/reference/matches_20.html","id":null,"dir":"Reference","previous_headings":"","what":"Matches data with error_max = 20 — matches_20","title":"Matches data with error_max = 20 — matches_20","text":"tibble indicating OTM best describe dynamics given tile assuming error_max = 20. purpose increased error visualization purposes (.e., empty tiles appear plots presented documentation vignettes).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/matches_20.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matches data with error_max = 20 — matches_20","text":"","code":"matches_20"},{"path":"https://ggcostoya.github.io/throne/reference/matches_20.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Matches data with error_max = 20 — matches_20","text":"tibble 6386 rows 4 columns #' latitude numeric column indicating latitude tile longitude numeric column indicating longitude tile otm_id character column indicating OTM best describe dynamics tile,  value NA indicates tile matched OTM  error < error_max error numeric column indicating average absolute error thermal dynamics tile OTM best described ","code":""},{"path":"https://ggcostoya.github.io/throne/reference/matches_20.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matches data with error_max = 20 — matches_20","text":"","code":"matches_5 #> # A tibble: 6,386 × 4 #>    latitude longitude otm_id error #>       <dbl>     <dbl> <chr>  <dbl> #>  1     39.9     -120. OTM26   4.29 #>  2     39.9     -120. OTM26   4.40 #>  3     39.9     -120. OTM26   3.32 #>  4     39.9     -120. OTM26   3.15 #>  5     39.9     -120. OTM26   3.36 #>  6     39.9     -120. OTM02   2.73 #>  7     39.9     -120. OTM26   3.18 #>  8     39.9     -120. OTM26   2.96 #>  9     39.9     -120. OTM26   2.94 #> 10     39.9     -120. OTM26   3.54 #> # ℹ 6,376 more rows"},{"path":"https://ggcostoya.github.io/throne/reference/matches_5.html","id":null,"dir":"Reference","previous_headings":"","what":"Matches data with error_max = 5 — matches_5","title":"Matches data with error_max = 5 — matches_5","text":"tibble indicating OTM best describe dynamics given tile assuming error_max = 5.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/matches_5.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matches data with error_max = 5 — matches_5","text":"","code":"matches_5"},{"path":"https://ggcostoya.github.io/throne/reference/matches_5.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Matches data with error_max = 5 — matches_5","text":"tibble 6386 rows 4 columns #' latitude numeric column indicating latitude tile longitude numeric column indicating longitude tile otm_id character column indicating OTM best describe dynamics tile,  value NA indicates tile matched OTM  error < error_max error numeric column indicating average absolute error thermal dynamics tile OTM best described ","code":""},{"path":"https://ggcostoya.github.io/throne/reference/matches_5.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Matches data with error_max = 5 — matches_5","text":"","code":"matches_5 #> # A tibble: 6,386 × 4 #>    latitude longitude otm_id error #>       <dbl>     <dbl> <chr>  <dbl> #>  1     39.9     -120. OTM26   4.29 #>  2     39.9     -120. OTM26   4.40 #>  3     39.9     -120. OTM26   3.32 #>  4     39.9     -120. OTM26   3.15 #>  5     39.9     -120. OTM26   3.36 #>  6     39.9     -120. OTM02   2.73 #>  7     39.9     -120. OTM26   3.18 #>  8     39.9     -120. OTM26   2.96 #>  9     39.9     -120. OTM26   2.94 #> 10     39.9     -120. OTM26   3.54 #> # ℹ 6,376 more rows"},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Match flights to OTM data — match_data","title":"Match flights to OTM data — match_data","text":"Matches thermal dynamics specific tiles (.e., specific latitude longitudes) collected across multiple flights thermal dynamics operative temperature model (OTM).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Match flights to OTM data — match_data","text":"","code":"match_data(flights_data, otm_splines, coverage_per, error_max)"},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Match flights to OTM data — match_data","text":"flights_data tibble flights data obtained rnp_flights_data corrected using correct_flights_data. temperature column op_temp function also work ir_temp provided. otm_splines nested tibble obtained using gen_otm_splines coverage_per numeric 0 - 1 indicating minimum coverage tile across flights provided order included matching. Coverage calculated number times temperature measured given tile divided total number flights. Values >= 0.9 recommended. function provide warning number tiles coverage > 0.5. error_max maximum average absolute error temperature measurements tile OTM makes match tile OTM valid. Error calculated average absolute value OTM prediction temperature measurements tile.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/match_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Match flights to OTM data — match_data","text":"matches tibble columns latitude, longitde, otm_id best describes thermal dynamics tile average absolute  error tile measurements OTM predictions. Rows .na(otm_id) indicate tiles error < error_max OTMs provided.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/otms_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Example OTMs data — otms_data","title":"Example OTMs data — otms_data","text":"data set 36 OTMs deployed field recording 3 days rate 1 observation every 2 minutes. data set obtained using rnp_otms_data function incorporates metadata OTM. row corresponds unique operative temperature measurement recorded unique OTM given moment time (.e., unique year, doy mod).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/otms_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example OTMs data — otms_data","text":"","code":"otms_data"},{"path":"https://ggcostoya.github.io/throne/reference/otms_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example OTMs data — otms_data","text":"data.frame 67584 rows 10 columns otm_id Character column unique identifier OTM year numeric column indicating year doy numeric column indicating day year mod numeric column indicating minute day op_temp numeric column indicating operative temperature microhabitat Character column describing microhabitat OTM deployed,  \"outrcrop\", \"small_rock\", \"rock\",  \"boulder\", \"ground\", \"bush\" orientation Character column describing orientation OTM deployed,  \"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\",  \"W\", \"NW\" \"Flat\"","code":""},{"path":"https://ggcostoya.github.io/throne/reference/otms_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example OTMs data — otms_data","text":"","code":"tibble::as_tibble(otms_data) #> # A tibble: 67,584 × 10 #>    otm_id  year   doy   mod op_temp microhabitat orientation latitude longitude #>    <chr>  <dbl> <dbl> <dbl>   <dbl> <chr>        <chr>          <dbl>     <dbl> #>  1 OTM01   2023   236   367    13.5 outcrop      N               39.9     -120. #>  2 OTM01   2023   236   369    13.5 outcrop      N               39.9     -120. #>  3 OTM01   2023   236   371    13.5 outcrop      N               39.9     -120. #>  4 OTM01   2023   236   373    13.5 outcrop      N               39.9     -120. #>  5 OTM01   2023   236   375    13.5 outcrop      N               39.9     -120. #>  6 OTM01   2023   236   377    13.5 outcrop      N               39.9     -120. #>  7 OTM01   2023   236   379    13.5 outcrop      N               39.9     -120. #>  8 OTM01   2023   236   381    13.5 outcrop      N               39.9     -120. #>  9 OTM01   2023   236   383    13.5 outcrop      N               39.9     -120. #> 10 OTM01   2023   236   385    13.5 outcrop      N               39.9     -120. #> # ℹ 67,574 more rows #> # ℹ 1 more variable: elevation <dbl>"},{"path":"https://ggcostoya.github.io/throne/reference/otms_metadata.html","id":null,"dir":"Reference","previous_headings":"","what":"Metadata for example OTMs — otms_metadata","title":"Metadata for example OTMs — otms_metadata","text":"Metadata example OTMs","code":""},{"path":"https://ggcostoya.github.io/throne/reference/otms_metadata.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Metadata for example OTMs — otms_metadata","text":"","code":"otms_metadata"},{"path":"https://ggcostoya.github.io/throne/reference/otms_metadata.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Metadata for example OTMs — otms_metadata","text":"tibble 36 rows 6 columns: otm_id Character column unique identifier OTM microhabitat Character column describing microhabitat OTM deployed,  \"outrcrop\", \"small_rock\", \"rock\",  \"boulder\", \"ground\", \"bush\" orientation Character column describing orientation OTM deployed,  \"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\",  \"W\", \"NW\" \"Flat\" latitude Latitude OTM deployed decimal degrees longitude Longitude OTM deployed decimal degrees elevation Elevation OTM deployed meters","code":""},{"path":"https://ggcostoya.github.io/throne/reference/otms_metadata.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Metadata for example OTMs — otms_metadata","text":"","code":"otms_metadata #> # A tibble: 36 × 6 #>    otm_id microhabitat orientation latitude longitude elevation #>    <chr>  <chr>        <chr>          <dbl>     <dbl>     <dbl> #>  1 OTM01  outcrop      N               39.9     -120.     1312. #>  2 OTM21  outcrop      NW              39.9     -120.     1312. #>  3 OTM07  outcrop      E               39.9     -120.     1312. #>  4 OTM16  outcrop      SE              39.9     -120.     1313. #>  5 OTM17  outcrop      Flat            39.9     -120.     1311. #>  6 OTM28  rock         Flat            39.9     -120.     1313. #>  7 OTM13  rock         S               39.9     -120.     1314. #>  8 OTM37  boulder      W               39.9     -120.     1314. #>  9 OTM33  boulder      Flat            39.9     -120.     1314. #> 10 OTM24  rock         E               39.9     -120.     1314. #> # ℹ 26 more rows"},{"path":"https://ggcostoya.github.io/throne/reference/otms_splines.html","id":null,"dir":"Reference","previous_headings":"","what":"Example OTM splines nested data — otms_splines","title":"Example OTM splines nested data — otms_splines","text":"nested tibble smoothing splines models OTM day deployed field validate methodology package. row corresponds unique OTM day year combination. data set contains metadata information deployment OTMs. data set generated data set otms_data using gen_otm_splines function specifying knot_p = 4.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/otms_splines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Example OTM splines nested data — otms_splines","text":"","code":"otms_splines"},{"path":"https://ggcostoya.github.io/throne/reference/otms_splines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Example OTM splines nested data — otms_splines","text":"tibble 132 rows 9 columns: otm_id Character column unique identifier OTM year numeric column indicating year doy numeric column indicating day year microhabitat Character column describing microhabitat OTM deployed,  \"outrcrop\", \"small_rock\", \"rock\",  \"boulder\", \"ground\", \"bush\" orientation Character column describing orientation OTM deployed,  \"N\", \"NE\", \"E\", \"SE\", \"S\", \"SW\",  \"W\", \"NW\" \"Flat\" latitude Latitude OTM deployed decimal degrees longitude Longitude OTM deployed decimal degrees elevation Elevation OTM deployed meters spline nested column containing smoothing spline model","code":""},{"path":"https://ggcostoya.github.io/throne/reference/otms_splines.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Example OTM splines nested data — otms_splines","text":"","code":"otms_splines #> # A tibble: 132 × 9 #>    otm_id  year   doy microhabitat orientation latitude longitude elevation #>    <chr>  <dbl> <dbl> <chr>        <chr>          <dbl>     <dbl>     <dbl> #>  1 OTM01   2023   236 outcrop      N               39.9     -120.     1312. #>  2 OTM01   2023   237 outcrop      N               39.9     -120.     1312. #>  3 OTM01   2023   238 outcrop      N               39.9     -120.     1312. #>  4 OTM01   2023   239 outcrop      N               39.9     -120.     1312. #>  5 OTM02   2023   236 outcrop      W               39.9     -120.     1313. #>  6 OTM02   2023   237 outcrop      W               39.9     -120.     1313. #>  7 OTM02   2023   238 outcrop      W               39.9     -120.     1313. #>  8 OTM02   2023   239 outcrop      W               39.9     -120.     1313. #>  9 OTM03   2023   236 rock         W               39.9     -120.     1317. #> 10 OTM03   2023   237 rock         W               39.9     -120.     1317. #> # ℹ 122 more rows #> # ℹ 1 more variable: spline <list>  # when unnesting a spline model otms_splines$spline[[2]] #> Call: #> smooth.spline(x = otm_x$mod, y = otm_x$op_temp, nknots = knot_n) #>  #> Smoothing Parameter  spar= 0.1308614  lambda= 5.402194e-08 (15 iterations) #> Equivalent Degrees of Freedom (Df): 87.04885 #> Penalized Criterion (RSS): 112.3158 #> GCV: 0.201852"},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":null,"dir":"Reference","previous_headings":"","what":"Predict thermal landscape — predict_thermal_landscape","title":"Predict thermal landscape — predict_thermal_landscape","text":"Predict thermal landscape","code":""},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Predict thermal landscape — predict_thermal_landscape","text":"","code":"predict_thermal_landscape(matches, otm_splines, doy, mod)"},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Predict thermal landscape — predict_thermal_landscape","text":"matches matches tibble obtained using match_data function. otm_splines complex tibble obtained using gen_otm_splines function. doy integer vector integers indicating day(s) year (doy) thermal landscape predicted. elements within doy must within range OTMs started finished recording operative temperatures. mod integer vector integers indicating minute(s) day (MOD) thermal landscape predicted. elements within mod must fall within 0 1440 range. mod includes values OTMs recording return NA provide diagnostics message","code":""},{"path":"https://ggcostoya.github.io/throne/reference/predict_thermal_landscape.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Predict thermal landscape — predict_thermal_landscape","text":"tibble predicted thermal landscape longitude, latitude,  doy, mod predicted operative temperature columns (pred_op_temp).","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flights_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process flights data — rnp_flights_data","title":"Read and process flights data — rnp_flights_data","text":"Reads processes data multiple flights .tif format adds metadata","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flights_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process flights data — rnp_flights_data","text":"","code":"rnp_flights_data(path, metadata, digits)"},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flights_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process flights data — rnp_flights_data","text":"path character indicating directory .tif` files flights stored. name flight .tif file must associated metadata function work. metadata metadata tibble flights information flight_id (character), date (MM/DD/YYYY), time_start (HH:MM) time_end (HH:MM) flight. digits integer (>0 & <6), indicating number decimal digit places final output summarized . dictate spatial resolution tiles eventual thermal landscape.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_flights_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process flights data — rnp_flights_data","text":"tibble row represents unique tile (unique combination    longitude latitude), associated IR surface temperature measurement    (ir_temp) unique flight. identify flight, row    return tibble also contains information year, date year (doy)    minute day (mod) flight started (mod_start) ended (mod_end)","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otms_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Read and process OTM data — rnp_otms_data","title":"Read and process OTM data — rnp_otms_data","text":"Read processes data multiple operative temperature model (OTM) .csv files adds metadata","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otms_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Read and process OTM data — rnp_otms_data","text":"","code":"rnp_otms_data(path, rows_skip, date_col, time_col, op_temp_col, metadata)"},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otms_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Read and process OTM data — rnp_otms_data","text":"path character specifying either path single folder multiple OTM files .csv format. file needs least column information moment (.e., date time day) measurement made column operative temperature value measurement rows_skip positive integer indicating rows skip reading OTM .csv files. omitted, defaults 0. date_col positive integer indicating column OTM .csv file contains date measurement. Dates need either MM/DD/YYYY HH:MM:SS, MM/DD/YYYY HH:MM MM/DD/YYYY. time_col positive integer indicating column OTM .csv file contains time measurement. Times need HH:MM:SS HH:MM format. specified, try extract date information date_col. op_temp_col positive integer indicating column column OTM .csv file contains operative temperature measurement metadata tibble data.frame containing metadata related OTM. needs otm_id character column matching names OTM files.","code":""},{"path":"https://ggcostoya.github.io/throne/reference/rnp_otms_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Read and process OTM data — rnp_otms_data","text":"tibble row represents unique operative temperature    measurement (op_temp) taken given OTM (specified otm_id),    occurred given year, date year (doy) minute    day (mod). tibble many additional columns    metadata characteristics included metadata.","code":""}]
